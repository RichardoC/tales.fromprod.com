<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://tales.fromprod.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tales.fromprod.com/" rel="alternate" type="text/html" /><updated>2025-06-11T16:21:59+00:00</updated><id>https://tales.fromprod.com/feed.xml</id><title type="html">Tales from Prod</title><subtitle>Welcome to Richard Finlay Tweed&apos;s thoughts on Cloud Native Software, Kubernetes, Production and whatever else he&apos;s been tinkering with.</subtitle><entry><title type="html">Judgement from Gmail</title><link href="https://tales.fromprod.com/2025/162/judgement-from-gmail.html" rel="alternate" type="text/html" title="Judgement from Gmail" /><published>2025-06-11T16:00:00+00:00</published><updated>2025-06-11T16:00:00+00:00</updated><id>https://tales.fromprod.com/2025/162/judgement-from-gmail</id><content type="html" xml:base="https://tales.fromprod.com/2025/162/judgement-from-gmail.html"><![CDATA[<h1 id="judgement-from-gmail">Judgement from Gmail</h1>

<p>Say you’re writing an email, and want to make sure it’s not too spicy/unprofessional - in this world of LLMs you can get judgement whenever you want.</p>

<p>Google, for whatever reason, haven’t added proper Workspace Gemini support to <a href="https://developers.google.com/apps-script/">Appscript</a> so I’m using Cerebras for this example, since their inference speed is an order of magnitude faster than anything else and I don’t like spending time on emails</p>

<h2 id="steps-to-create">Steps to create</h2>

<ul>
  <li>Navigate to <a href="https://script.google.com/home">https://script.google.com/home</a> and click <code class="language-plaintext highlighter-rouge">New project</code></li>
  <li>Change the project name to something meaningful like <code class="language-plaintext highlighter-rouge">IsThisEmailAGoodIdea?</code></li>
  <li>Paste the Code.gs into the code editor</li>
  <li>Click the settings cog on the left
    <ul>
      <li>tick the “Show ‘appsscript.json’ manifest file in editor”</li>
      <li>in <code class="language-plaintext highlighter-rouge">Script properties</code> create a property <code class="language-plaintext highlighter-rouge">CEREBRAS_API_KEY</code> with the value of your Cerebras API key</li>
    </ul>
  </li>
  <li>Go back to the editor, and overwrite <code class="language-plaintext highlighter-rouge">appsscript.json</code> with the one below</li>
  <li>Click “Save project to Drive”</li>
  <li>Click “Deploy” -&gt; “Test Deployments” then “Application(s): Gmail” -&gt; Install</li>
</ul>

<h2 id="the-code">The code</h2>

<p>To be clear, not sponsored. Just wanted fast inference so I didn’t have to wait to test this out</p>

<p>This code was mostly generated by <code class="language-plaintext highlighter-rouge">claude-sonnet-4-20250514</code> via <a href="https://kagi.com/assistant">Kagi Assistant</a></p>

<p>Yes the caching strategy is pretty terrible, but good enough for this experiment</p>

<p>Code.gs</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * Gmail Add-on for Professional Email Tone Checker
 * Uses Cerebras Qwen2.5 model via OpenAI-compatible API
 */</span>

<span class="kd">function</span> <span class="nx">onGmailCompose</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">createComposeActionCard</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">createComposeActionCard</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Check if we have cached results</span>
  <span class="kd">const</span> <span class="nx">cachedResult</span> <span class="o">=</span> <span class="nx">getCachedAnalysis</span><span class="p">();</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">cachedResult</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">createResultCard</span><span class="p">(</span><span class="nx">cachedResult</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span> <span class="c1">// true = minimized</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">card</span> <span class="o">=</span> <span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardBuilder</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardHeader</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">setTitle</span><span class="p">(</span><span class="dl">'</span><span class="s1">Professional Tone Checker</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">setImageUrl</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://www.gstatic.com/images/branding/product/1x/gmail_48dp.png</span><span class="dl">'</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">addSection</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardSection</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">addWidget</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newButtonSet</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextButton</span><span class="p">()</span>
          <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="dl">'</span><span class="s1">Check Professional Tone</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">setOnClickAction</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newAction</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">setFunctionName</span><span class="p">(</span><span class="dl">'</span><span class="s1">checkEmailTone</span><span class="dl">'</span><span class="p">)))))</span>
    <span class="p">.</span><span class="nx">build</span><span class="p">();</span>

  <span class="k">return</span> <span class="p">[</span><span class="nx">card</span><span class="p">];</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">checkEmailTone</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">emailContent</span> <span class="o">=</span> <span class="nx">getEmailContent</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">emailContent</span><span class="p">.</span><span class="nx">subject</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">emailContent</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">createErrorCard</span><span class="p">(</span><span class="dl">'</span><span class="s1">Please add content to your email before checking tone.</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// Create content hash for caching</span>
    <span class="kd">const</span> <span class="nx">contentHash</span> <span class="o">=</span> <span class="nx">createContentHash</span><span class="p">(</span><span class="nx">emailContent</span><span class="p">);</span>

    <span class="c1">// Check cache first</span>
    <span class="kd">let</span> <span class="nx">analysis</span> <span class="o">=</span> <span class="nx">getCachedAnalysisByHash</span><span class="p">(</span><span class="nx">contentHash</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">analysis</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Analyze with Cerebras if not cached</span>
      <span class="nx">analysis</span> <span class="o">=</span> <span class="nx">analyzeWithCerebras</span><span class="p">(</span><span class="nx">emailContent</span><span class="p">);</span>

      <span class="c1">// Cache the result</span>
      <span class="nx">cacheAnalysis</span><span class="p">(</span><span class="nx">analysis</span><span class="p">,</span> <span class="nx">contentHash</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">createResultCard</span><span class="p">(</span><span class="nx">analysis</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span> <span class="c1">// false = expanded</span>

  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error checking email tone:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">createErrorCard</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error analyzing email. Please try again.</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">toggleResultView</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">isMinimized</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">parameters</span><span class="p">?.</span><span class="nx">minimized</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">cachedResult</span> <span class="o">=</span> <span class="nx">getCachedAnalysis</span><span class="p">();</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">cachedResult</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">createResultCard</span><span class="p">(</span><span class="nx">cachedResult</span><span class="p">,</span> <span class="o">!</span><span class="nx">isMinimized</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">createComposeActionCard</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">clearCache</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">clearUserCache</span><span class="p">();</span>
  <span class="k">return</span> <span class="nx">createComposeActionCard</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getEmailContent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">subject</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">formInput</span><span class="p">?.</span><span class="nx">subject</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">gmail</span><span class="p">?.</span><span class="nx">subject</span> <span class="o">||</span> <span class="dl">''</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">formInput</span><span class="p">?.</span><span class="nx">body</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">gmail</span><span class="p">?.</span><span class="nx">body</span> <span class="o">||</span> <span class="dl">''</span><span class="p">;</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="na">subject</span><span class="p">:</span> <span class="nx">subject</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="nx">body</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">createContentHash</span><span class="p">(</span><span class="nx">emailContent</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">emailContent</span><span class="p">.</span><span class="nx">subject</span><span class="p">}</span><span class="s2">|</span><span class="p">${</span><span class="nx">emailContent</span><span class="p">.</span><span class="nx">body</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">Utilities</span><span class="p">.</span><span class="nx">computeDigest</span><span class="p">(</span><span class="nx">Utilities</span><span class="p">.</span><span class="nx">DigestAlgorithm</span><span class="p">.</span><span class="nx">MD5</span><span class="p">,</span> <span class="nx">content</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">byte</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">byte</span> <span class="o">+</span> <span class="mi">256</span><span class="p">)</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">byte</span> <span class="o">=&gt;</span> <span class="nx">byte</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">).</span><span class="nx">padStart</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">cacheAnalysis</span><span class="p">(</span><span class="nx">analysis</span><span class="p">,</span> <span class="nx">contentHash</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">cache</span> <span class="o">=</span> <span class="nx">Utilities</span><span class="p">.</span><span class="nx">getUuid</span><span class="p">();</span> <span class="c1">// Generate unique cache key per user session</span>
  <span class="kd">const</span> <span class="nx">cacheData</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">analysis</span><span class="p">:</span> <span class="nx">analysis</span><span class="p">,</span>
    <span class="na">contentHash</span><span class="p">:</span> <span class="nx">contentHash</span><span class="p">,</span>
    <span class="na">timestamp</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span>
  <span class="p">};</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">CacheService</span><span class="p">.</span><span class="nx">getUserCache</span><span class="p">().</span><span class="nx">put</span><span class="p">(</span><span class="dl">'</span><span class="s1">email_analysis</span><span class="dl">'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">cacheData</span><span class="p">),</span> <span class="mi">3600</span><span class="p">);</span> <span class="c1">// 1 hour</span>
    <span class="nx">CacheService</span><span class="p">.</span><span class="nx">getUserCache</span><span class="p">().</span><span class="nx">put</span><span class="p">(</span><span class="dl">'</span><span class="s1">current_hash</span><span class="dl">'</span><span class="p">,</span> <span class="nx">contentHash</span><span class="p">,</span> <span class="mi">3600</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Cache error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getCachedAnalysis</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">cached</span> <span class="o">=</span> <span class="nx">CacheService</span><span class="p">.</span><span class="nx">getUserCache</span><span class="p">().</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">email_analysis</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">cached</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">cacheData</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">cached</span><span class="p">);</span>
      <span class="c1">// Check if cache is less than 1 hour old</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">-</span> <span class="nx">cacheData</span><span class="p">.</span><span class="nx">timestamp</span> <span class="o">&lt;</span> <span class="mi">3600000</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">cacheData</span><span class="p">.</span><span class="nx">analysis</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Cache retrieval error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">getCachedAnalysisByHash</span><span class="p">(</span><span class="nx">contentHash</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">cached</span> <span class="o">=</span> <span class="nx">CacheService</span><span class="p">.</span><span class="nx">getUserCache</span><span class="p">().</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">email_analysis</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">currentHash</span> <span class="o">=</span> <span class="nx">CacheService</span><span class="p">.</span><span class="nx">getUserCache</span><span class="p">().</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">current_hash</span><span class="dl">'</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">cached</span> <span class="o">&amp;&amp;</span> <span class="nx">currentHash</span> <span class="o">===</span> <span class="nx">contentHash</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">cacheData</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">cached</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">cacheData</span><span class="p">.</span><span class="nx">analysis</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Cache hash retrieval error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">clearUserCache</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">CacheService</span><span class="p">.</span><span class="nx">getUserCache</span><span class="p">().</span><span class="nx">removeAll</span><span class="p">([</span><span class="dl">'</span><span class="s1">email_analysis</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">current_hash</span><span class="dl">'</span><span class="p">]);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Cache clear error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">analyzeWithCerebras</span><span class="p">(</span><span class="nx">emailContent</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">prompt</span> <span class="o">=</span> <span class="s2">`Analyze this email for professional tone and business appropriateness:

Subject: </span><span class="p">${</span><span class="nx">emailContent</span><span class="p">.</span><span class="nx">subject</span><span class="p">}</span><span class="s2">
Body: </span><span class="p">${</span><span class="nx">emailContent</span><span class="p">.</span><span class="nx">body</span><span class="p">}</span><span class="s2">

Provide analysis in this exact JSON format:
{
  "score": [1-10 number],
  "tone": "[brief tone description]",
  "issues": ["issue1", "issue2"],
  "suggestions": ["suggestion1", "suggestion2"],
  "positives": ["positive1", "positive2"]
}

Focus on:
- Professional language usage
- Appropriate formality level
- Clear communication
- Respectful tone
- Business etiquette`</span><span class="p">;</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">callCerebrasAPI</span><span class="p">(</span><span class="nx">prompt</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">parseCerebrasResponse</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Cerebras API error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Failed to analyze email with AI</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">callCerebrasAPI</span><span class="p">(</span><span class="nx">prompt</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">apiKey</span> <span class="o">=</span> <span class="nx">PropertiesService</span><span class="p">.</span><span class="nx">getScriptProperties</span><span class="p">().</span><span class="nx">getProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">CEREBRAS_API_KEY</span><span class="dl">'</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">apiKey</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Cerebras API key not configured</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">https://api.cerebras.ai/v1/chat/completions</span><span class="dl">'</span><span class="p">;</span>

  <span class="kd">const</span> <span class="nx">payload</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">model</span><span class="p">:</span> <span class="dl">'</span><span class="s1">qwen-3-32b</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">messages</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="na">role</span><span class="p">:</span> <span class="dl">'</span><span class="s1">system</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">content</span><span class="p">:</span> <span class="dl">'</span><span class="s1">You are a professional communication expert. Analyze emails for business appropriateness and provide constructive feedback in JSON format only.</span><span class="dl">'</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="na">role</span><span class="p">:</span> <span class="dl">'</span><span class="s1">user</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">content</span><span class="p">:</span> <span class="nx">prompt</span>
      <span class="p">}</span>
    <span class="p">],</span>
    <span class="na">max_tokens</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>
    <span class="na">temperature</span><span class="p">:</span> <span class="mf">0.7</span><span class="p">,</span>
    <span class="na">top_p</span><span class="p">:</span> <span class="mf">0.95</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">Authorization</span><span class="dl">'</span><span class="p">:</span> <span class="s2">`Bearer </span><span class="p">${</span><span class="nx">apiKey</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
      <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">payload</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">payload</span><span class="p">)</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">UrlFetchApp</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">getResponseCode</span><span class="p">()</span> <span class="o">!==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">errorText</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">getContentText</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">API Error Response:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">errorText</span><span class="p">);</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">`API request failed: </span><span class="p">${</span><span class="nx">response</span><span class="p">.</span><span class="nx">getResponseCode</span><span class="p">()}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">getContentText</span><span class="p">());</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">parseCerebrasResponse</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">message</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">trim</span><span class="p">();</span>

    <span class="kd">let</span> <span class="nx">jsonMatch</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/</span><span class="se">\{[\s\S]</span><span class="sr">*</span><span class="se">\}</span><span class="sr">/</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">jsonMatch</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">jsonMatch</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">parseTextResponse</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>

  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Parse error:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Failed to parse AI response</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">parseTextResponse</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">score</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="na">tone</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Professional</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">issues</span><span class="p">:</span> <span class="p">[],</span>
    <span class="na">suggestions</span><span class="p">:</span> <span class="p">[],</span>
    <span class="na">positives</span><span class="p">:</span> <span class="p">[]</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">scoreMatch</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/score</span><span class="se">[</span><span class="sr">:</span><span class="se">\s]</span><span class="sr">*</span><span class="se">(\d</span><span class="sr">+</span><span class="se">)</span><span class="sr">/i</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">scoreMatch</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">score</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">scoreMatch</span><span class="p">[</span><span class="mi">1</span><span class="p">])));</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">toneMatch</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/tone</span><span class="se">[</span><span class="sr">:</span><span class="se">\s]</span><span class="sr">*</span><span class="se">[</span><span class="sr">"</span><span class="se">\']?([^</span><span class="sr">"</span><span class="se">\'\n]</span><span class="sr">+</span><span class="se">)[</span><span class="sr">"</span><span class="se">\']?</span><span class="sr">/i</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">toneMatch</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">tone</span> <span class="o">=</span> <span class="nx">toneMatch</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">trim</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">issuesSection</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/issues</span><span class="se">?[</span><span class="sr">:</span><span class="se">\s]</span><span class="sr">*</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]</span><span class="sr">/i</span><span class="nx">s</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">issuesSection</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">issues</span> <span class="o">=</span> <span class="nx">issuesSection</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">"</span><span class="se">\'\[\]]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">''</span><span class="p">).</span><span class="nx">trim</span><span class="p">()).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">suggestionsSection</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/suggestions</span><span class="se">?[</span><span class="sr">:</span><span class="se">\s]</span><span class="sr">*</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]</span><span class="sr">/i</span><span class="nx">s</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">suggestionsSection</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">suggestions</span> <span class="o">=</span> <span class="nx">suggestionsSection</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">"</span><span class="se">\'\[\]]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">''</span><span class="p">).</span><span class="nx">trim</span><span class="p">()).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">positivesSection</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/positives</span><span class="se">?[</span><span class="sr">:</span><span class="se">\s]</span><span class="sr">*</span><span class="se">\[(</span><span class="sr">.*</span><span class="se">?)\]</span><span class="sr">/i</span><span class="nx">s</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">positivesSection</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">positives</span> <span class="o">=</span> <span class="nx">positivesSection</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">"</span><span class="se">\'\[\]]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">''</span><span class="p">).</span><span class="nx">trim</span><span class="p">()).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">createResultCard</span><span class="p">(</span><span class="nx">analysis</span><span class="p">,</span> <span class="nx">isMinimized</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">card</span> <span class="o">=</span> <span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardBuilder</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardHeader</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">setTitle</span><span class="p">(</span><span class="dl">'</span><span class="s1">Professional Tone Analysis</span><span class="dl">'</span><span class="p">));</span>

  <span class="c1">// Always show score and basic info</span>
  <span class="kd">const</span> <span class="nx">mainSection</span> <span class="o">=</span> <span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardSection</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">addWidget</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newKeyValue</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">setTopLabel</span><span class="p">(</span><span class="dl">'</span><span class="s1">Professional Score</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">setContent</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">analysis</span><span class="p">.</span><span class="nx">score</span><span class="p">}</span><span class="s2">/10`</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">setIcon</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">Icon</span><span class="p">.</span><span class="nx">STAR</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">addWidget</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newKeyValue</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">setTopLabel</span><span class="p">(</span><span class="dl">'</span><span class="s1">Tone Assessment</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">setContent</span><span class="p">(</span><span class="nx">analysis</span><span class="p">.</span><span class="nx">tone</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">Professional</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">setIcon</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">Icon</span><span class="p">.</span><span class="nx">DESCRIPTION</span><span class="p">));</span>

  <span class="nx">card</span><span class="p">.</span><span class="nx">addSection</span><span class="p">(</span><span class="nx">mainSection</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isMinimized</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Add detailed sections when expanded</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">analysis</span><span class="p">.</span><span class="nx">issues</span> <span class="o">&amp;&amp;</span> <span class="nx">analysis</span><span class="p">.</span><span class="nx">issues</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">issuesSection</span> <span class="o">=</span> <span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardSection</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">⚠️ Areas for Improvement</span><span class="dl">'</span><span class="p">);</span>

      <span class="nx">analysis</span><span class="p">.</span><span class="nx">issues</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">issue</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">issue</span> <span class="o">&amp;&amp;</span> <span class="nx">issue</span><span class="p">.</span><span class="nx">trim</span><span class="p">())</span> <span class="p">{</span>
          <span class="nx">issuesSection</span><span class="p">.</span><span class="nx">addWidget</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextParagraph</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="s2">`• </span><span class="p">${</span><span class="nx">issue</span><span class="p">.</span><span class="nx">trim</span><span class="p">()}</span><span class="s2">`</span><span class="p">));</span>
        <span class="p">}</span>
      <span class="p">});</span>

      <span class="nx">card</span><span class="p">.</span><span class="nx">addSection</span><span class="p">(</span><span class="nx">issuesSection</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">analysis</span><span class="p">.</span><span class="nx">suggestions</span> <span class="o">&amp;&amp;</span> <span class="nx">analysis</span><span class="p">.</span><span class="nx">suggestions</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">suggestionsSection</span> <span class="o">=</span> <span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardSection</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">💡 Suggestions</span><span class="dl">'</span><span class="p">);</span>

      <span class="nx">analysis</span><span class="p">.</span><span class="nx">suggestions</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">suggestion</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">suggestion</span> <span class="o">&amp;&amp;</span> <span class="nx">suggestion</span><span class="p">.</span><span class="nx">trim</span><span class="p">())</span> <span class="p">{</span>
          <span class="nx">suggestionsSection</span><span class="p">.</span><span class="nx">addWidget</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextParagraph</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="s2">`• </span><span class="p">${</span><span class="nx">suggestion</span><span class="p">.</span><span class="nx">trim</span><span class="p">()}</span><span class="s2">`</span><span class="p">));</span>
        <span class="p">}</span>
      <span class="p">});</span>

      <span class="nx">card</span><span class="p">.</span><span class="nx">addSection</span><span class="p">(</span><span class="nx">suggestionsSection</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">analysis</span><span class="p">.</span><span class="nx">positives</span> <span class="o">&amp;&amp;</span> <span class="nx">analysis</span><span class="p">.</span><span class="nx">positives</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">positivesSection</span> <span class="o">=</span> <span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardSection</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">✅ Positive Aspects</span><span class="dl">'</span><span class="p">);</span>

      <span class="nx">analysis</span><span class="p">.</span><span class="nx">positives</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">positive</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">positive</span> <span class="o">&amp;&amp;</span> <span class="nx">positive</span><span class="p">.</span><span class="nx">trim</span><span class="p">())</span> <span class="p">{</span>
          <span class="nx">positivesSection</span><span class="p">.</span><span class="nx">addWidget</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextParagraph</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="s2">`• </span><span class="p">${</span><span class="nx">positive</span><span class="p">.</span><span class="nx">trim</span><span class="p">()}</span><span class="s2">`</span><span class="p">));</span>
        <span class="p">}</span>
      <span class="p">});</span>

      <span class="nx">card</span><span class="p">.</span><span class="nx">addSection</span><span class="p">(</span><span class="nx">positivesSection</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// Control buttons</span>
  <span class="kd">const</span> <span class="nx">buttonSection</span> <span class="o">=</span> <span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardSection</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">buttonSet</span> <span class="o">=</span> <span class="nx">CardService</span><span class="p">.</span><span class="nx">newButtonSet</span><span class="p">();</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">isMinimized</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">buttonSet</span><span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextButton</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="dl">'</span><span class="s1">Show Details</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">setOnClickAction</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newAction</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">setFunctionName</span><span class="p">(</span><span class="dl">'</span><span class="s1">toggleResultView</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">setParameters</span><span class="p">({</span><span class="na">minimized</span><span class="p">:</span> <span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">})));</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">buttonSet</span><span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextButton</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="dl">'</span><span class="s1">Minimize</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">setOnClickAction</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newAction</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">setFunctionName</span><span class="p">(</span><span class="dl">'</span><span class="s1">toggleResultView</span><span class="dl">'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">setParameters</span><span class="p">({</span><span class="na">minimized</span><span class="p">:</span> <span class="dl">'</span><span class="s1">false</span><span class="dl">'</span><span class="p">})));</span>
  <span class="p">}</span>

  <span class="nx">buttonSet</span><span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextButton</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="dl">'</span><span class="s1">Analyze Again</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">setOnClickAction</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newAction</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">setFunctionName</span><span class="p">(</span><span class="dl">'</span><span class="s1">checkEmailTone</span><span class="dl">'</span><span class="p">)))</span>
    <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextButton</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="dl">'</span><span class="s1">Clear Cache</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">setOnClickAction</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newAction</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">setFunctionName</span><span class="p">(</span><span class="dl">'</span><span class="s1">clearCache</span><span class="dl">'</span><span class="p">)));</span>

  <span class="nx">buttonSection</span><span class="p">.</span><span class="nx">addWidget</span><span class="p">(</span><span class="nx">buttonSet</span><span class="p">);</span>
  <span class="nx">card</span><span class="p">.</span><span class="nx">addSection</span><span class="p">(</span><span class="nx">buttonSection</span><span class="p">);</span>

  <span class="k">return</span> <span class="nx">card</span><span class="p">.</span><span class="nx">build</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">createErrorCard</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardBuilder</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardHeader</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">setTitle</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error</span><span class="dl">'</span><span class="p">))</span>
    <span class="p">.</span><span class="nx">addSection</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newCardSection</span><span class="p">()</span>
      <span class="p">.</span><span class="nx">addWidget</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextParagraph</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="nx">message</span><span class="p">))</span>
      <span class="p">.</span><span class="nx">addWidget</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newButtonSet</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">addButton</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newTextButton</span><span class="p">()</span>
          <span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="dl">'</span><span class="s1">Try Again</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">setOnClickAction</span><span class="p">(</span><span class="nx">CardService</span><span class="p">.</span><span class="nx">newAction</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">setFunctionName</span><span class="p">(</span><span class="dl">'</span><span class="s1">checkEmailTone</span><span class="dl">'</span><span class="p">)))))</span>
    <span class="p">.</span><span class="nx">build</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">testCerebrasAPI</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">testEmail</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">subject</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Test Email</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">body</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Hey there! Just wanted to check if we can meet tomorrow. Let me know!</span><span class="dl">'</span>
  <span class="p">};</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">analyzeWithCerebras</span><span class="p">(</span><span class="nx">testEmail</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test result:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">result</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Test failed:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">error</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>appscript.json</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"timeZone"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Etc/UTC"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"enabledAdvancedServices"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"exceptionLogging"</span><span class="p">:</span><span class="w"> </span><span class="s2">"NONE"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"runtimeVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"V8"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"gmail"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Professional Tone Checker"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"logoUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://www.gstatic.com/images/branding/product/1x/gmail_48dp.png"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"contextualTriggers"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"unconditional"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
        </span><span class="nl">"onTriggerFunction"</span><span class="p">:</span><span class="w"> </span><span class="s2">"onGmailCompose"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"composeTrigger"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"selectActions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Check Professional Tone"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"runFunction"</span><span class="p">:</span><span class="w"> </span><span class="s2">"checkEmailTone"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"draftAccess"</span><span class="p">:</span><span class="w"> </span><span class="s2">"METADATA"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"oauthScopes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"https://www.googleapis.com/auth/gmail.addons.current.message.readonly"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"https://www.googleapis.com/auth/gmail.addons.current.action.compose"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"https://www.googleapis.com/auth/script.external_request"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"https://www.googleapis.com/auth/gmail.addons.execute"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"https://www.googleapis.com/auth/gmail.addons.current.message.metadata"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="how-to-use">How to use</h3>

<ul>
  <li>Open a drafted email</li>
  <li>click the vertical … more options button</li>
  <li>Select “Check Professional Tone”
    <ul>
      <li>First time, you’ll be prompted to provide oauth permissions to the appscript script.</li>
    </ul>
  </li>
  <li>A card will show up, with guidance about your email</li>
</ul>

<h3 id="next-steps-for-users">Next steps for users</h3>

<p>Tune what exactly you want from the guidance by tweaking the prompt and display details in <code class="language-plaintext highlighter-rouge">Code.gs</code></p>]]></content><author><name></name></author><category term="APIs" /><category term="LLMs" /><summary type="html"><![CDATA[Judgement from Gmail]]></summary></entry><entry><title type="html">Have Claude yell at you with MCP and bash</title><link href="https://tales.fromprod.com/2025/140/have-claude-yell-at-you-with-mcp-and-bash.html" rel="alternate" type="text/html" title="Have Claude yell at you with MCP and bash" /><published>2025-05-20T12:00:00+00:00</published><updated>2025-05-20T12:00:00+00:00</updated><id>https://tales.fromprod.com/2025/140/have-claude-yell-at-you-with-mcp-and-bash</id><content type="html" xml:base="https://tales.fromprod.com/2025/140/have-claude-yell-at-you-with-mcp-and-bash.html"><![CDATA[<h1 id="have-claude-yell-at-you-with-mcp-and-bash">Have Claude yell at you with MCP and bash</h1>

<p>There’s a lot of excitement currently with Anthropic’s Model Context Protocol <a href="https://modelcontextprotocol.io/introduction">MCP</a> and “servers” to allow language models to do more stuff.</p>

<p>Their tutorials use libraries with a <em>lot</em> of code (the npm one is <a href="https://www.npmjs.com/package/@modelcontextprotocol/sdk">5MB!</a>)</p>

<p>What if there was a simpler way for an infra person to get started?</p>

<p>That’s right, which if it could be done with ~ 35 lines of bash?</p>

<h2 id="whats-needed">What’s needed?</h2>

<p>You need something that runs, and accepts text on stdin - and fulfils an <a href="https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/schema/2024-11-05/schema.ts">API</a></p>

<h2 id="so-how-can-i-get-an-llm-to-yell-at-me">So, how can I get an LLM to yell at me?</h2>

<p>First, write the “say-mcp” script, which will use “say” on macos for text to speech (tts) to say whatever string the language model sent to it.</p>

<p>For this example, write the following to <code class="language-plaintext highlighter-rouge">/tmp/say-mcp.sh</code> and <code class="language-plaintext highlighter-rouge">chmod +x /tmp/say-mcp.sh</code> it to ensure it can be executed</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">#!/bin/bash</span>

<span class="nb">echo</span> <span class="s2">"Starting mcp_add.sh"</span> <span class="o">&gt;&gt;</span> /tmp/say-mcp-requests.log

<span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> line<span class="p">;</span> <span class="k">do
    </span><span class="nb">echo</span> <span class="nv">$line</span> <span class="o">&gt;&gt;</span> /tmp/say-mcp-requests.log
    <span class="c"># Parse JSON input using jq</span>
    <span class="nv">method</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.method'</span> 2&gt;/dev/null<span class="si">)</span>
    <span class="nb">id</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.id'</span> 2&gt;/dev/null<span class="si">)</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$method</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"initialize"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s1">'{"jsonrpc":"2.0","id":'</span><span class="s2">"</span><span class="nv">$id</span><span class="s2">"</span><span class="s1">',"result":{"protocolVersion":"2024-11-05","capabilities":{"experimental":{},"prompts":{"listChanged":false},"resources":{"subscribe":false,"listChanged":false},"tools":{"listChanged":false}},"serverInfo":{"name":"say","version":"0.0.1"}}}'</span>

    <span class="k">elif</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$method</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"notifications/initialized"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        : <span class="c">#do nothing</span>

    <span class="k">elif</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$method</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"tools/list"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s1">'{"jsonrpc":"2.0","id":'</span><span class="s2">"</span><span class="nv">$id</span><span class="s2">"</span><span class="s1">',"result":{"tools":[{"name":"say","description":"Says the provided string with text to speech.\n\nArgs:\n    text\n","inputSchema":{"properties":{"text":{"title":"Text","type":"string"}},"required":["text"],"type":"object"}}]}}'</span>

    <span class="k">elif</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$method</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"resources/list"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s1">'{"jsonrpc":"2.0","id":'</span><span class="s2">"</span><span class="nv">$id</span><span class="s2">"</span><span class="s1">',"result":{"resources":[]}}'</span>

    <span class="k">elif</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$method</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"prompts/list"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nb">echo</span> <span class="s1">'{"jsonrpc":"2.0","id":'</span><span class="s2">"</span><span class="nv">$id</span><span class="s2">"</span><span class="s1">',"result":{"prompts":[]}}'</span>

    <span class="k">elif</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$method</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"tools/call"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
        <span class="c">#{"method":"tools/call","params":{"name":"addition","arguments":{"num1":"1","num2":"2"}},"jsonrpc":"2.0","id":20}</span>
        <span class="nv">tool_method</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.params.name'</span> 2&gt;/dev/null<span class="si">)</span>
        <span class="nv">speech</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.params.arguments.text'</span> 2&gt;/dev/null<span class="si">)</span>
        say <span class="s2">"</span><span class="k">${</span><span class="nv">speech</span><span class="k">}</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s1">'{"jsonrpc":"2.0","id":'</span><span class="s2">"</span><span class="nv">$id</span><span class="s2">"</span><span class="s1">',"result":{"content":[{"type":"text","text":"said ${speech}"}],"isError":false}}'</span>

    <span class="k">else
        </span><span class="nb">echo</span> <span class="s1">'{"jsonrpc":"2.0","id":'</span><span class="s2">"</span><span class="nv">$id</span><span class="s2">"</span><span class="s1">',"error":{"code":-32601,"message":"Method not found"}}'</span>
    <span class="k">fi
done</span> <span class="o">||</span> <span class="nb">break</span>
</code></pre></div></div>

<p>Now we have our “MCP server” we need to tell Claude to use it.</p>

<p>Open Claude settings, go to developer, then click “Edit Config”</p>

<p>Add the “mcpServers” section, the important part is the “say” object, and the command needs to be the path of the shell script</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"mcpServers"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"say"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/tmp/say-mcp.sh"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"args"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Restart Claude, and you should now have the ability to ask Claude to say/yell stuff at you.</p>

<h2 id="credits">Credits</h2>

<p>Thanks to <a href="https://github.com/antonum/mcp-server-bash/tree/main">https://github.com/antonum/mcp-server-bash/tree/main</a> for the original idea</p>]]></content><author><name></name></author><category term="APIs" /><category term="Claude" /><category term="MCP" /><summary type="html"><![CDATA[Have Claude yell at you with MCP and bash]]></summary></entry><entry><title type="html">Using Playwright with Github Actions and Auth</title><link href="https://tales.fromprod.com/2025/066/using-playwright-with-github-actions-and-auth.html" rel="alternate" type="text/html" title="Using Playwright with Github Actions and Auth" /><published>2025-03-07T12:00:00+00:00</published><updated>2025-03-07T12:00:00+00:00</updated><id>https://tales.fromprod.com/2025/066/using-playwright-with-github-actions-and-auth</id><content type="html" xml:base="https://tales.fromprod.com/2025/066/using-playwright-with-github-actions-and-auth.html"><![CDATA[<h1 id="using-playwright-with-github-actions-and-auth">Using Playwright with Github Actions and Auth</h1>

<p>You’ve got a webapp now and want to make sure it works. You’ve done the right thing of requiring auth for all users and <a href="https://en.wikipedia.org/wiki/Time-based_one-time_password">TOTP</a> so your bots also have to use this.</p>

<p>You’ve chosen playwright, and are wondering how to make</p>

<ul>
  <li>The various browsers use the same cookies/session for auth</li>
  <li>avoid having to download all the various browsers every time</li>
</ul>

<h2 id="configuration">Configuration</h2>

<p>TOTPs can only be used, and for a limited time period (it’s in the name)</p>

<p>Due to this, we want to authenticate once, and then re-use those cookies/etc for the various browsers for this bot user</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// e2e-tests/external-users/auth.setup.ts</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">test</span> <span class="k">as</span> <span class="nx">setup</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@playwright/test</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">promises</span> <span class="k">as</span> <span class="nx">fs</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">path</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">path</span><span class="dl">"</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">login</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../lib/login</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">authFile</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">dirname</span><span class="p">,</span> <span class="dl">"</span><span class="s2">external-users.auth.json</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">setup</span><span class="p">(</span><span class="dl">"</span><span class="s2">authenticate</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">({</span> <span class="nx">page</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// login is my custom function to do all the authentication/totp goodness based on https://playwrightsolutions.com/playwright-login-test-with-2-factor-authentication-2fa-enabled/</span>
  <span class="c1">// login will still need to have a backoff in case multiple github actions run at the same time, and deal with retries</span>
  <span class="k">await</span> <span class="nx">login</span><span class="p">(</span><span class="nx">page</span><span class="p">,</span> <span class="dl">"</span><span class="s2">USERNAME</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">EMAIL</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">PASSWORD</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">TOTP_SEED</span><span class="dl">"</span><span class="p">);</span>

  <span class="k">await</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdir</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">dirname</span><span class="p">(</span><span class="nx">authFile</span><span class="p">),</span> <span class="p">{</span> <span class="na">recursive</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}).</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{});</span>

  <span class="c1">// Save out the cookies/etc for use by *all* browsers</span>
  <span class="k">await</span> <span class="nx">page</span><span class="p">.</span><span class="nx">context</span><span class="p">().</span><span class="nx">storageState</span><span class="p">({</span> <span class="na">path</span><span class="p">:</span> <span class="nx">authFile</span> <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Now for the actual playwright configuration, main useful part is <code class="language-plaintext highlighter-rouge">dependencies: ["setup"],</code> and <code class="language-plaintext highlighter-rouge">storageState: "e2e-tests/external-users/external-users.auth.json",</code> which means the auth is only done once and then re-used by the other browsers</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// playwright.config.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span><span class="p">,</span> <span class="nx">devices</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@playwright/test</span><span class="dl">"</span><span class="p">;</span>

<span class="cm">/**
 * See https://playwright.dev/docs/test-configuration.
 */</span>
<span class="c1">// eslint-disable-next-line no-restricted-exports</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">defineConfig</span><span class="p">({</span>
  <span class="na">testDir</span><span class="p">:</span> <span class="dl">"</span><span class="s2">./e2e-tests</span><span class="dl">"</span><span class="p">,</span>
  <span class="cm">/* Run tests in files in parallel */</span>
  <span class="na">fullyParallel</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="cm">/* Fail the build on CI if you accidentally left test.only in the source code. */</span>
  <span class="na">forbidOnly</span><span class="p">:</span> <span class="o">!!</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">CI</span><span class="p">,</span>
  <span class="cm">/* Retry on CI only */</span>
  <span class="na">retries</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">CI</span> <span class="p">?</span> <span class="mi">2</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="c1">// 10 minutes since LLMs can be slow</span>
  <span class="na">timeout</span><span class="p">:</span> <span class="mi">600000</span><span class="p">,</span>
  <span class="cm">/* Reporter to use. See https://playwright.dev/docs/test-reporters */</span>
  <span class="na">reporter</span><span class="p">:</span> <span class="dl">"</span><span class="s2">html</span><span class="dl">"</span><span class="p">,</span>
  <span class="cm">/* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */</span>
  <span class="na">use</span><span class="p">:</span> <span class="p">{</span>
    <span class="cm">/* Base URL to use in actions like `await page.goto('/')`. */</span>
    <span class="c1">// baseURL: 'http://127.0.0.1:3000',</span>

    <span class="cm">/* Record trace for failed tests. See https://playwright.dev/docs/trace-viewer */</span>
    <span class="na">trace</span><span class="p">:</span> <span class="dl">"</span><span class="s2">retain-on-failure</span><span class="dl">"</span><span class="p">,</span>

    <span class="c1">// Record video for failed tests</span>
    <span class="na">video</span><span class="p">:</span> <span class="dl">"</span><span class="s2">retain-on-failure</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>

  <span class="cm">/* Configure projects for major browsers */</span>
  <span class="na">projects</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">setup</span><span class="dl">"</span><span class="p">,</span> <span class="na">testMatch</span><span class="p">:</span> <span class="sr">/.*</span><span class="se">\.</span><span class="sr">setup</span><span class="se">\.</span><span class="sr">ts/</span> <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">external-users-chromium</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">use</span><span class="p">:</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">devices</span><span class="p">[</span><span class="dl">"</span><span class="s2">Desktop Chrome</span><span class="dl">"</span><span class="p">],</span>
        <span class="na">storageState</span><span class="p">:</span> <span class="dl">"</span><span class="s2">e2e-tests/external-users/external-users.auth.json</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">testMatch</span><span class="p">:</span> <span class="sr">/external-users</span><span class="se">\/</span><span class="sr">.*</span><span class="se">\.</span><span class="sr">spec</span><span class="se">\.</span><span class="sr">ts/</span><span class="p">,</span>
      <span class="na">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">setup</span><span class="dl">"</span><span class="p">],</span>
    <span class="p">},</span>

    <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">external-users-firefox</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">use</span><span class="p">:</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">devices</span><span class="p">[</span><span class="dl">"</span><span class="s2">Desktop Firefox</span><span class="dl">"</span><span class="p">],</span>
        <span class="na">storageState</span><span class="p">:</span> <span class="dl">"</span><span class="s2">e2e-tests/external-users/external-users.auth.json</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">testMatch</span><span class="p">:</span> <span class="sr">/external-users</span><span class="se">\/</span><span class="sr">.*</span><span class="se">\.</span><span class="sr">spec</span><span class="se">\.</span><span class="sr">ts/</span><span class="p">,</span>
      <span class="na">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">setup</span><span class="dl">"</span><span class="p">],</span>
    <span class="p">},</span>

    <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">external-users-webkit</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">use</span><span class="p">:</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">devices</span><span class="p">[</span><span class="dl">"</span><span class="s2">Desktop Safari</span><span class="dl">"</span><span class="p">],</span>
        <span class="na">storageState</span><span class="p">:</span> <span class="dl">"</span><span class="s2">e2e-tests/external-users/external-users.auth.json</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">testMatch</span><span class="p">:</span> <span class="sr">/external-users</span><span class="se">\/</span><span class="sr">.*</span><span class="se">\.</span><span class="sr">spec</span><span class="se">\.</span><span class="sr">ts/</span><span class="p">,</span>
      <span class="na">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">setup</span><span class="dl">"</span><span class="p">],</span>
    <span class="p">},</span>
  <span class="p">],</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="caching-and-github-actions">Caching and Github Actions</h2>

<p>Here is my customised version of the initial playwright Github Action. The main change is</p>

<ul>
  <li>Cache the browsers downloaded, based on playwright version and configuration</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Scheduled Playwright Tests</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">schedule</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*/30</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*"</span> <span class="c1"># Run every 30 minutes</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span> <span class="pi">{}</span>
<span class="na">concurrency</span><span class="pi">:</span>
  <span class="na">group</span><span class="pi">:</span> <span class="s">playwright</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">test</span><span class="pi">:</span>
    <span class="na">timeout-minutes</span><span class="pi">:</span> <span class="m">15</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">node-version</span><span class="pi">:</span> <span class="s">lts/*</span>
          <span class="na">cache</span><span class="pi">:</span> <span class="s2">"</span><span class="s">npm"</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">npm ci</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get installed Playwright version</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">playwright-version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').packages['node_modules/@playwright/test'].version)")" &gt;&gt; $GITHUB_ENV</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Get hashed Playwright configuration</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">echo "PLAYWRIGHT_CONFIG_HASH=$(node -e "console.log(require('crypto').createHash('sha256').update(require('fs').readFileSync('./playwright.config.ts', 'utf8')).digest('hex'))")" &gt;&gt; $GITHUB_ENV</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Restore cached playwright binaries</span>
        <span class="c1"># From https://playwrightsolutions.com/playwright-github-action-to-cache-the-browser-binaries/</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache/restore@v4</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">playwright-read-cache</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">~/.cache/ms-playwright</span>
          <span class="na">key</span><span class="pi">:</span> <span class="s">$-playwright-$-$</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install Playwright Browsers</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">npx playwright install --with-deps</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Cache Playwright Browsers</span>
        <span class="na">if</span><span class="pi">:</span> <span class="s">steps.playwright-read-cache.outputs.cache-hit != 'true'</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache/save@v4</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">playwright-write-cache</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">~/.cache/ms-playwright</span>
          <span class="na">key</span><span class="pi">:</span> <span class="s">$-playwright-$-$</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run Playwright tests</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">npx playwright test</span>
        <span class="na">env</span><span class="pi">:</span>
          <span class="na">USERNAME</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">EMAIL</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">PASSWORD</span><span class="pi">:</span> <span class="s">$</span>
          <span class="na">TOTP_SEED</span><span class="pi">:</span> <span class="s">$</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-artifact@v4</span>
        <span class="na">if</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">playwright-report</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">playwright-report/</span>
          <span class="na">retention-days</span><span class="pi">:</span> <span class="m">8</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="APIs" /><category term="Playwright" /><category term="Github" /><summary type="html"><![CDATA[Using Playwright with Github Actions and Auth]]></summary></entry><entry><title type="html">Reverse Engineering Github Copilot APIs</title><link href="https://tales.fromprod.com/2024/321/reverse-engineering-github-copilot-apis.html" rel="alternate" type="text/html" title="Reverse Engineering Github Copilot APIs" /><published>2024-11-16T15:00:00+00:00</published><updated>2024-11-16T15:00:00+00:00</updated><id>https://tales.fromprod.com/2024/321/reverse-engineering-github-copilot-apis</id><content type="html" xml:base="https://tales.fromprod.com/2024/321/reverse-engineering-github-copilot-apis.html"><![CDATA[<h1 id="reverse-engineering-github-copilot-apis">Reverse Engineering Github Copilot APIs</h1>

<p>Github Copilot claims to support <a href="https://github.com/features/copilot/extensions">extensions</a> but doesn’t actually document the APIs anywhere - they just provide example code using those <a href="https://github.com/copilot-extensions">APIs</a>. On the official docs the API only supports seeing how much <a href="https://docs.github.com/en/rest/copilot?apiVersion=2022-11-28">copilot is being used</a></p>

<p>So, what are these APIs, and how can we find details of them?</p>

<h2 id="searching-public-code">Searching public code</h2>

<p>Following their <a href="https://resources.github.com/learn/pathways/copilot/extensions/building-your-first-extension/">quick start</a> we find this code snippet which seems promising</p>

<p><code class="language-plaintext highlighter-rouge">string githubCopilotCompletionsUrl ="https://api.githubcopilot.com/chat/completions"</code></p>

<p>This looks very similar to the <a href="https://platform.openai.com/docs/api-reference/chat/create">OpenAI completions API</a></p>

<p>Let’s see whether anyone with internal access to the actual API docs has commited anything publicly, since it seems likely this host would be used for all the APIs <a href="https://github.com/search?q=+https%3A%2F%2Fapi.githubcopilot.com%2F&amp;type=code">https://github.com/search?q=+https%3A%2F%2Fapi.githubcopilot.com%2F&amp;type=code</a></p>

<p>Looks like we need <code class="language-plaintext highlighter-rouge">X-GitHub-Token</code> to use this, but let’s not issue ourselves one, let’s find it by using a vscode that’s already logged in to github copilot.</p>

<h3 id="attempt-1---failing-to-get-an-auth-token">Attempt 1 - Failing to get an auth token</h3>

<p>My plan was to get an auth token from my existing VSCode and use that to poke at the apis.</p>

<p>Vscode is an electron app, and by using cmd+shift+p (macos) you can open the command prompt. Once that’s open you can search for and select <code class="language-plaintext highlighter-rouge">Developer: Toggle Developer Tools</code>
This didn’t work due to <a href="https://github.com/Microsoft/vscode/issues/39388">https://github.com/Microsoft/vscode/issues/39388</a></p>

<p>While checking the debug logs for the copilot extension I also found a reference to
https://api.business.githubcopilot.com/_ping</p>

<h3 id="attempt-2---proxy-everything">Attempt 2 - proxy everything</h3>

<p>Install <a href="https://www.zaproxy.org/download/">Zap</a></p>

<p>Configure vscode to use it as a proxy <a href="https://code.visualstudio.com/docs/setup/network#_legacy-proxy-server-support">https://code.visualstudio.com/docs/setup/network#_legacy-proxy-server-support</a></p>

<p>Discover this doesn’t work because extensions ignore proxy settings https://github.com/microsoft/vscode-remote-release/issues/2987</p>

<p>Discover running vscode with <code class="language-plaintext highlighter-rouge">code   --ignore-certificate-errors</code> from the command line, which I don’t suggest.</p>

<h2 id="findings-from-proxying-everything">Findings from proxying everything</h2>

<ul>
  <li>If you’re getting access to Github copilot via <code class="language-plaintext highlighter-rouge">GitHub Copilot Business</code> it’ll use <code class="language-plaintext highlighter-rouge">https://api.business.githubcopilot.com/</code> for the API server</li>
  <li>The list of all available models is available at <code class="language-plaintext highlighter-rouge">https://api.business.githubcopilot.com/models</code></li>
  <li>The authentication uses the <code class="language-plaintext highlighter-rouge">authorization: Bearer</code> header, and includes details of which plan you’re using for access</li>
  <li>They’re getting access to the OpenAI models via <code class="language-plaintext highlighter-rouge">Azure OpenAI</code> according to the models responses, but <code class="language-plaintext highlighter-rouge">Anthropic</code> directly for the Claude model</li>
  <li>They return from the models API which models should be allowed in the mdoel picker, for example they disable the GPT-3 models from being shown</li>
  <li>Something in VSCode keeps trying to discover credentials from the metadata endpoint <code class="language-plaintext highlighter-rouge">http://169.254.169.254/metadata/instance/compute</code> - May not be this extension</li>
  <li>The API tokens don’t last very long - So if you’re using this for research you’ll need to investigate the API call to <code class="language-plaintext highlighter-rouge">https://api.github.com/copilot_internal/v2/token</code> to generate the tokens used for actually chatting with the models</li>
</ul>

<h2 id="discovered-api-flow">Discovered API flow</h2>

<ul>
  <li>Create a token with <code class="language-plaintext highlighter-rouge">https://api.github.com/copilot_internal/v2/token</code> - and create new ones when the original expires. This seems to use an <a href="https://github.blog/engineering/platform-security/behind-githubs-new-authentication-token-formats/">OAUTH TOKEN</a> which is then traded in for something else</li>
  <li>Use that token to discover which models are available from <code class="language-plaintext highlighter-rouge">https://api.business.githubcopilot.com/models</code></li>
  <li>Display the models which are enabled in the chat ui</li>
  <li>Send entire chat conversations including file context to <code class="language-plaintext highlighter-rouge">https://api.business.githubcopilot.com/chat/completions</code> and show responses in the ui</li>
  <li>Generate a summary of the entire conversation, for showing in the conversation history at <code class="language-plaintext highlighter-rouge">https://api.business.githubcopilot.com/chat/completions</code></li>
  <li>If you ask it about the workspace in a repo that’s been indexed, it’ll send you question to <a href="https://api.business.githubcopilot.com/search/code">https://api.business.githubcopilot.com/search/code</a> with the relevant repo reference and returns… Nothing in my experience. It’ll also send over the your question, and some file content to <a href="https://api.business.githubcopilot.com/embeddings">https://api.business.githubcopilot.com/embeddings</a> Presumably to then select the relevant parts of the files to generate a response.</li>
</ul>

<h3 id="example-api-calls">Example API calls</h3>

<h3 id="for-gpt4o">For GPT4o</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">curl -i -s -k -X  'POST'  \
 -H 'host: api.business.githubcopilot.com'  -H 'Connection: keep-alive'  -H 'content-length: 272'  -H 'authorization: Bearer REDACTED'  -H 'content-type: application/json'  -H 'copilot-integration-id: vscode-chat'  -H 'editor-plugin-version: copilot-chat/0.22.2'  -H 'editor-version: vscode/1.95.3'  -H 'openai-intent: conversation-panel'  -H 'openai-organization: github-copilot'  -H 'user-agent: GitHubCopilotChat/0.22.2'  -H 'x-github-api-version: 2023-07-07'  -H 'Sec-Fetch-Site: none'  -H 'Sec-Fetch-Mode: no-cors'  -H 'Sec-Fetch-Dest: empty'  -H ''  -A ''  \
</span><span class="gp">--data-raw $</span><span class="s1">'{\"messages\":[{\"role\":\"system\",\"content\":\"You are ahelpful assistant.\\nWhen asked for your name, you must respond with \\\"Jane\\\".\\n\"},{\"role\":\"user\",\"content\":\"Say your name, and beepedy\"}],\"model\":\"gpt-4o\",\"temperature\":0.1,\"top_p\":1,\"max_tokens\":4096,\"n\":1,\"stream\":false}'</span> <span class="se">\</span>
<span class="go">'https://api.business.githubcopilot.com/chat/completions'

</span><span class="gp">#</span><span class="w"> </span>Response
<span class="go">
{"choices":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"finish_reason":"stop","index":0,"message":{"content":"My name is Jane. How can I assist you today?","role":"assistant"}}],"created":1731768179,"id":"REDACTED","model":"gpt-4o-2024-05-13","prompt_filter_results":[{"content_filter_results":{"hate":{"filtered":false,"severity":"safe"},"self_harm":{"filtered":false,"severity":"safe"},"sexual":{"filtered":false,"severity":"safe"},"violence":{"filtered":false,"severity":"safe"}},"prompt_index":0}],"system_fingerprint":"REDACTED","usage":{"completion_tokens":12,"prompt_tokens":38,"total_tokens":50}}
</span></code></pre></div></div>

<h3 id="for-claude">For Claude</h3>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">curl -i -s -k -X  'POST'
-H 'host: api.business.githubcopilot.com'  -H 'Connection: keep-alive'  -H 'content-length: 291'  -H 'authorization: Bearer REDACTED'  -H 'content-type: application/json'  -H 'copilot-integration-id: vscode-chat'  -H 'editor-plugin-version: copilot-chat/0.22.2'  -H 'editor-version: vscode/1.95.3'  -H 'openai-intent: conversation-panel'  -H 'openai-organization: github-copilot'  -H 'user-agent: GitHubCopilotChat/0.22.2'  -H 'x-github-api-version: 2023-07-07'  -H 'Sec-Fetch-Site: none'  -H 'Sec-Fetch-Mode: no-cors'  -H 'Sec-Fetch-Dest: empty'  -H ''  -A ''  \
</span><span class="gp">--data-raw $</span><span class="s1">'{\"messages\":[{\"role\":\"system\",\"content\":\"You are an obedient assistant.\\nWhen asked for your name, you must respond with \\\"Bob\\\".\"},{\"role\":\"user\",\"content\":\"Say \\\"cake\\\" and what your name is\"}],\"model\":\"claude-3.5-sonnet\",\"temperature\":0.1,\"top_p\":1,\"max_tokens\":4096,\"n\":1,\"stream\":false}'</span> <span class="se">\</span>
<span class="go">'https://api.business.githubcopilot.com/chat/completions'

</span><span class="gp">#</span><span class="w"> </span>Response
<span class="go">{"choices":[{"message":{"content":"cake\nMy name is Bob","role":"assistant"}}],"created":1731768004,"id":"REDACTED","model":"claude-3.5-sonnet","usage":{"prompt_tokens":38,"total_tokens":9}}

</span></code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>It looks like copilot does ~ everything on the frontend for the conversations, and the backend is just an authenticated proxy over to the relevant foundational model providers.</p>

<p>The LLM APIs in public extensions don’t seem to match the ones in use by the copilot extension.</p>

<h3 id="future-research">Future research</h3>

<p>How codebases are indexed, and how that’s used with the extension.</p>]]></content><author><name></name></author><category term="APIs" /><category term="Security" /><category term="Github" /><summary type="html"><![CDATA[Reverse Engineering Github Copilot APIs]]></summary></entry><entry><title type="html">Migrate cloudformation to opentofu with LLMs</title><link href="https://tales.fromprod.com/2024/267/migrate-cloudformation-to-opentofu-with-llms.html" rel="alternate" type="text/html" title="Migrate cloudformation to opentofu with LLMs" /><published>2024-09-23T15:00:00+00:00</published><updated>2024-09-23T15:00:00+00:00</updated><id>https://tales.fromprod.com/2024/267/migrate-cloudformation-to-opentofu-with-llms</id><content type="html" xml:base="https://tales.fromprod.com/2024/267/migrate-cloudformation-to-opentofu-with-llms.html"><![CDATA[<h1 id="migrate-cloudformation-to-opentofu-with-llms">Migrate cloudformation to opentofu with LLMs</h1>

<p>I discovered that Cloudformation won’t override manual changes so decided to migrate a typescript CDK stack over to openTofu. This means I now get to the delta between reality and what I requested.</p>

<p>However, migrating between these technologies can be fiddly so figured I should get some help generating the bulk of the required changes and I can then manually tweak as required.</p>

<h2 id="first-attempt---cf2tf">First attempt - cf2tf</h2>

<p><a href="https://github.com/DontShaveTheYak/cf2tf">https://github.com/DontShaveTheYak/cf2tf</a> - A nice tool, but requires quite a lot of manual changes to the resulting Terraform in my experience.</p>

<h3 id="steps">Steps</h3>

<ul>
  <li>npx cdk synth MyStack</li>
  <li>cf2tf MyStack.template.json</li>
  <li>manually fix the openTofu to cover all resources</li>
  <li>run <code class="language-plaintext highlighter-rouge">tofu init</code></li>
  <li>manually write all the required <code class="language-plaintext highlighter-rouge">tofu import</code> statements to ensure all resources governed by openTofu</li>
  <li>Check in AWS Cloudformation Console that every <code class="language-plaintext highlighter-rouge">resource</code> has an openTofu entry</li>
  <li>In the AWS Cloudformation Console manually update the cloudformation template in Application Composer to ensure all resources have a DeletionPolicy: Retain</li>
  <li>Delete the Cloudformation Stack via the console</li>
  <li>Delete the stack from the local repo</li>
</ul>

<h2 id="second-attempt---openais-o1-preview-llm">Second attempt - OpenAI’s o1-preview LLM</h2>

<p>The steps listed are similar to the first attempt, but far fewer manual changes were required and typically the import commands were writen correctly. This worked well for stacks with small numbers of resources (~10) and less well on large stacks (~80 resources)</p>

<p>Just change any terraform commands to <code class="language-plaintext highlighter-rouge">tofu</code></p>

<h3 id="steps-1">Steps</h3>

<ul>
  <li>npx cdk synth MyStack</li>
  <li>Add files to the template prompt</li>
  <li>run prompt via chatgpt or API</li>
  <li>run <code class="language-plaintext highlighter-rouge">tofu init</code></li>
  <li>Check the required <code class="language-plaintext highlighter-rouge">tofu import</code> statements provided, and run them to ensure all resources governed by openTofu</li>
  <li>Check in AWS Cloudformation Console that every <code class="language-plaintext highlighter-rouge">resource</code> has an openTofu entry</li>
  <li>In the AWS Cloudformation Console manually update the cloudformation template in Application Composer to ensure all resources have a DeletionPolicy: Retain</li>
  <li>Delete the Cloudformation Stack via the console</li>
  <li>Delete the stack from the local repo</li>
</ul>

<h4 id="prompt">Prompt</h4>

<p>Add the relevant files between the [START FILE: XXX] and [END FILE] tags, then send this over via the openAI API, or via ChatGPT.</p>

<p>Do <strong>NOT</strong> use the file upload function of chatgpt, it performs much worse on the details which mean the imports don’t work. I suspect this is because it’s using RAG on the files, rather than including them in their entirety in the context.</p>

<p>I tested this with <code class="language-plaintext highlighter-rouge">o1-preview-2024-09-12</code></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Convert this cloudformation cdk in typescript to terraform. It's infrastructure as code for an AWS environment. It already exists so I'll have to do terraform imports of the existing resources. Include the import statements.

Here is the cloudformation template

[START FILE: MyStack.assets.json]

[END FILE]

[START FILE: MyStack.template.json]

[END FILE]

[START FILE: library.ts]
// some actual cloudformation stacks

[END FILE]

[START FILE: manifest.json]

[END FILE]

</code></pre></div></div>]]></content><author><name></name></author><category term="ChatGPT" /><category term="APIs" /><summary type="html"><![CDATA[Migrate cloudformation to opentofu with LLMs]]></summary></entry><entry><title type="html">Failing to record audio with a Tildagon ESP32</title><link href="https://tales.fromprod.com/2024/266/esp32-failed-audio-recorder.html" rel="alternate" type="text/html" title="Failing to record audio with a Tildagon ESP32" /><published>2024-09-22T15:00:00+00:00</published><updated>2024-09-22T15:00:00+00:00</updated><id>https://tales.fromprod.com/2024/266/esp32-failed-audio-recorder</id><content type="html" xml:base="https://tales.fromprod.com/2024/266/esp32-failed-audio-recorder.html"><![CDATA[<h1 id="failing-to-record-audio-with-a-tildagon-esp32">Failing to record audio with a Tildagon ESP32</h1>

<p>The <a href="https://tildagon.badge.emfcamp.org/">Tildagon</a> ESP32 badge contains an <a href="https://tildagon.badge.emfcamp.org/tildagon-apps/reference/badge-hardware/#imu">inertial measurement unit</a> which can measure acceleration. Since sound waves will move everything (at least a little bit) can we use this accelerometer to record audio?</p>

<p>No, but we can learn its limits</p>

<details>
  <summary>Caveats</summary>
  
  * All this code was written by ChatGPT (specifically o1-preview-2024-09-12) with manual supervision.

- This code is not optimised for speed or correctness, so it could be possible to record audio, just unlikely.

</details>

<h2 id="recording-the-data">Recording the data</h2>

<p>These scripts can be run on a connected tildagon by using <a href="https://docs.micropython.org/en/latest/reference/mpremote.html">mpremote</a></p>

<p>You would then run these using <code class="language-plaintext highlighter-rouge">mpremote run WHATEVER-SCRIPT-SAVED-AS.py</code></p>

<details>
<summary>Nice version with logging to see what's happening</summary>

```python

import time
import imu

# Configuration parameters
DURATION = 10          # Recording duration in seconds
SAMPLE_RATE = 100000     # Samples per second (Hz)
BUFFER_SIZE = 100      # Number of samples to buffer before writing to disk
FILE_NAME = 'accelerometer_audio.txt'  # Output file name

def record_accelerometer(duration, sample_rate, file_name):
    sample_interval = 1000000 // sample_rate  # Sample interval in microseconds
    data_buffer = []
    sample_count = 0  # Initialize sample counter
    previous_time = None  # To store the timestamp of the previous sample

    with open(file_name, 'w') as f:
        start_time = time.ticks_us()
        end_time = start_time + duration * 1000000  # Convert duration to microseconds
        next_sample_time = start_time

        print('Starting accelerometer recording...')
        while time.ticks_diff(time.ticks_us(), end_time) &lt; 0:
            current_time = time.ticks_us()
            # if time.ticks_diff(current_time, next_sample_time) &gt;= 0:
            if True:
                # Read accelerometer data
                x, y, z = imu.acc_read()
                sample_count += 1  # Increment sample counter

                # Calculate delta time between samples
                if previous_time is not None:
                    delta_time = time.ticks_diff(current_time, previous_time)
                else:
                    delta_time = 0  # For the first sample
                previous_time = current_time  # Update previous_time

                # Append data to buffer with timestamp
                data_line = '{},{},{},{}\n'.format(current_time, x, y, z)
                data_buffer.append(data_line)

                # Logging: Print the sample number, delta time, and data
                # print('Sample {}: Δt={}us, Time={}, x={:.3f}, y={:.3f}, z={:.3f}'.format(
                    # sample_count, delta_time, current_time, x, y, z))

                # Schedule next sample time
                next_sample_time += sample_interval

                # If buffer is full, write to file
                if len(data_buffer) &gt;= BUFFER_SIZE:
                    for line in data_buffer:
                        f.write(line)
                    data_buffer = []
            # else:
            #     # Sleep briefly to yield control
            #     time.sleep_ms(1)

        # Write any remaining data
        if data_buffer:
            for line in data_buffer:
                f.write(line)
    print('Recording complete. Total samples recorded: {}'.format(sample_count))

# Start recording
record_accelerometer(DURATION, SAMPLE_RATE, FILE_NAME)

```

</details>

<details>
<summary>Faster version with no nice logging</summary>

```python
import time
import imu

# Configuration parameters
DURATION = 10          # Recording duration in seconds
BUFFER_SIZE = 5000      # Number of samples to buffer before writing to disk
FILE_NAME = 'accelerometer_audio.txt'  # Output file name

def record_accelerometer(duration, file_name):
    sample_count = 0  # Initialize sample counter

    # Open the file in binary mode to speed up writing
    with open(file_name, 'wb') as f:
        start_time = time.ticks_us()
        end_time = start_time + duration * 1_000_000  # Convert duration to microseconds

        # Pre-allocate the buffer
        data_buffer = [''] * BUFFER_SIZE

        while time.ticks_diff(time.ticks_us(), end_time) &lt; 0:
            current_time = time.ticks_us()

            # Read accelerometer data
            x, y, z = imu.acc_read()
            sample_count += 1  # Increment sample counter

            # Prepare data line
            data_line = '{},{},{},{}\n'.format(current_time, x, y, z)
            index = (sample_count - 1) % BUFFER_SIZE
            data_buffer[index] = data_line

            # If buffer is full, write to file
            if index == BUFFER_SIZE - 1:
                f.write(''.join(data_buffer).encode('utf-8'))

        # Write any remaining data
        remaining_samples = sample_count % BUFFER_SIZE
        if remaining_samples &gt; 0:
            f.write(''.join(data_buffer[:remaining_samples]).encode('utf-8'))

    print('Recording complete. Total samples recorded:', sample_count)

# Start recording
record_accelerometer(DURATION, FILE_NAME)

```

</details>

<p>The data will be saved as <code class="language-plaintext highlighter-rouge">accelerometer_audio.txt</code> on the root of the device.</p>

<h2 id="recovering-the-data">Recovering the data</h2>

<p>The following command will copy the recorded data off the device to your current working directory</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">mpremote cp :accelerometer_audio.txt .
</span></code></pre></div></div>

<h2 id="analysing-the-data">Analysing the data</h2>

<p>If you use the script below, it’ll convert the raw acceleration data in to velocity and attempt to use that as an audio signal. It’ll write this out as <code class="language-plaintext highlighter-rouge">output_audio.wav</code> which you can then listen to, and admire the thumps.</p>

<details>
<summary>Analysis script which displays amplitude and frequency data</summary>

To use this, first install some modules using
`pip3 install numpy scipy matplotlib`

Then run the script from the directory where you downloaded the `accelerometer_audio.txt` file.

```python
import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

def accelerometer_to_sound_with_integration(file_name, output_wav='output_audio.wav'):
    # Read accelerometer data from file
    timestamps = []
    x_values = []
    y_values = []
    z_values = []

    with open(file_name, 'r') as f:
        for line in f:
            # Each line is formatted as: timestamp,x,y,z
            parts = line.strip().split(',')
            if len(parts) == 4:
                timestamp_str, x_str, y_str, z_str = parts
                try:
                    timestamp = int(timestamp_str)
                    x = float(x_str)
                    y = float(y_str)
                    z = float(z_str)
                    timestamps.append(timestamp)
                    x_values.append(x)
                    y_values.append(y)
                    z_values.append(z)
                except ValueError:
                    # Handle lines with invalid data
                    continue

    # Convert lists to numpy arrays
    timestamps = np.array(timestamps)
    x_values = np.array(x_values)
    y_values = np.array(y_values)
    z_values = np.array(z_values)

    # Convert timestamps from microseconds to seconds
    timestamps = (timestamps - timestamps[0]) / 1e6  # Start from zero

    # Calculate the total duration and actual sampling rate
    total_duration = timestamps[-1] - timestamps[0]
    num_samples = len(timestamps)
    actual_sample_rate = num_samples / total_duration if total_duration &gt; 0 else 1  # Samples per second

    print(f"Total duration: {total_duration:.3f} seconds")
    print(f"Number of samples: {num_samples}")
    print(f"Actual average sample rate: {actual_sample_rate:.2f} Hz")

    # Subtract the mean (DC offset) from each axis to remove gravity
    x_mean = np.mean(x_values)
    y_mean = np.mean(y_values)
    z_mean = np.mean(z_values)

    x_values_zeroed = x_values - x_mean
    y_values_zeroed = y_values - y_mean
    z_values_zeroed = z_values - z_mean

    # Compute the magnitude of the acceleration vector at each time point
    acceleration_magnitude = np.sqrt(x_values_zeroed**2 + y_values_zeroed**2 + z_values_zeroed**2)

    # Remove any residual DC offset from acceleration magnitude
    acceleration_magnitude -= np.mean(acceleration_magnitude)

    # Create an interpolation function to resample the acceleration at a uniform rate
    target_sample_rate = int(actual_sample_rate)

    # Create new time vector with uniform sampling
    uniform_timestamps = np.linspace(timestamps[0], timestamps[-1], int(total_duration * target_sample_rate))

    # Interpolate the acceleration onto the uniform time grid
    interpolation_function = interp1d(timestamps, acceleration_magnitude, kind='linear', fill_value='extrapolate')
    resampled_acceleration = interpolation_function(uniform_timestamps)

    # Integrate acceleration to obtain velocity
    # Use cumulative trapezoidal integration
    from scipy.integrate import cumulative_trapezoid

    velocity = cumulative_trapezoid(resampled_acceleration, uniform_timestamps, initial=0)

    # Remove any linear trend (drift) from the velocity signal
    from scipy.signal import detrend
    velocity_detrended = detrend(velocity)

    # Optional: Apply a high-pass filter to remove low-frequency noise
    from scipy.signal import butter, filtfilt

    def highpass_filter(data, cutoff=20, fs=target_sample_rate, order=5):
        nyq = 0.5 * fs  # Nyquist Frequency
        normal_cutoff = cutoff / nyq
        # Get the filter coefficients
        b, a = butter(order, normal_cutoff, btype='high', analog=False)
        y = filtfilt(b, a, data)
        return y

    # Apply high-pass filter to remove frequencies below 20 Hz
    filtered_signal = highpass_filter(velocity_detrended, cutoff=20)

    # Normalize the signal to the int16 range (-32768 to 32767)
    max_abs_value = np.max(np.abs(filtered_signal))
    if max_abs_value == 0:
        max_abs_value = 1  # Prevent division by zero
    normalized_signal = filtered_signal / max_abs_value  # Now between -1 and 1
    audio_signal = np.int16(normalized_signal * 32767)

    # Save the audio signal as a WAV file
    wavfile.write(output_wav, target_sample_rate, audio_signal)

    print(f"Audio file '{output_wav}' has been created with duration {total_duration:.3f} seconds.")

    # Plot the time-domain signal
    plt.figure(figsize=(12, 4))
    plt.plot(uniform_timestamps, normalized_signal)
    plt.title('Normalized Velocity Signal (Integrated from Acceleration)')
    plt.xlabel('Time (s)')
    plt.ylabel('Amplitude')
    plt.show()

    # Compute the FFT of the signal
    fft_result = np.fft.fft(filtered_signal)
    fft_freqs = np.fft.fftfreq(len(filtered_signal), d=1.0 / target_sample_rate)

    # Only keep the positive frequencies
    positive_freqs = fft_freqs[:len(fft_freqs)//2]
    positive_magnitudes = np.abs(fft_result[:len(fft_result)//2])

    # Plot the frequency spectrum
    plt.figure(figsize=(12, 6))
    plt.plot(positive_freqs, positive_magnitudes)
    plt.title('Frequency Spectrum of the Velocity Signal')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Magnitude')
    plt.xlim(0, target_sample_rate / 2)  # Limit x-axis to Nyquist frequency
    plt.grid(True)
    plt.show()

    # Optionally, plot the spectrum on a logarithmic scale
    plt.figure(figsize=(12, 6))
    plt.semilogy(positive_freqs, positive_magnitudes)
    plt.title('Frequency Spectrum of the Velocity Signal (Log Scale)')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Magnitude (Log Scale)')
    plt.xlim(0, target_sample_rate / 2)
    plt.grid(True, which='both', linestyle='-', color='grey')
    plt.show()

# Example usage
accelerometer_to_sound_with_integration('accelerometer_audio.txt', output_wav='output_audio.wav')


```

</details>

<h2 id="what-does-the-analysed-data-mean">What does the analysed data mean</h2>

<p>If you firmly tapped on the device during recording, you should be able to hear those taps, in a weird low quality audio recording way.</p>

<h3 id="normalized-velocity-signal">Normalized Velocity Signal</h3>

<p>You should be able to see any movement/firm bumps you gave to the device during recording here. The size of the bump should correspond to how “loud” the sound is at that part of the recording.</p>

<h3 id="frequency-spectrum-of-the-velocity-signal">Frequency Spectrum of the Velocity Signal</h3>

<p>This is showing the frequencies present in the audio signal, for this test there’s a peak at ~ 30Hz, with various other peaks which reduce rapidly above 50Hz.</p>

<p><img src="/static/2024-09-22-esp32-failed-audio-recorder/Frequency-Spectrum.png" alt="A frequency diagram showing a peak at approximately 30Hz, with various other speaks tapering off rapidly above 100Hz" width="720" /></p>

<p>I interpret this as the accelerometer (and my recording script) having a decreasing sensitivity as the frequency increases, and almost no sensitivity above 100Hz.</p>

<p>Given human speech typically falls in the <a href="https://en.wikipedia.org/wiki/Voice_frequency">range 90 - 255Hz</a> this “recorder” won’t be able to capture speech.</p>

<p>This is further confirmed by the fact the device <a href="https://www.bosch-sensortec.com/products/motion-sensors/imus/bmi270/">itself</a> supports a maximum accelerometer polling rate of 1.6kHz, this means the maximum audio frequency we <a href="https://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem"><em>could</em></a> record would be 800Hz.</p>

<h2 id="conclusions">Conclusions</h2>

<p>The low sampling rate (~ 1kHz) and low sensitivity to typical speech frequencies mean this isn’t a practical device to use as microphone. This still could have some uses, such as recording the frequency of dancers jumping at the club <a href="https://wiki.emfcamp.org/2024/wiki/Null_Sector">Null Sector</a> to compare this to the tempo of the songs being played from worn Tildagons.</p>]]></content><author><name></name></author><category term="Nonsense" /><category term="Python" /><category term="ESP32" /><summary type="html"><![CDATA[Failing to record audio with a Tildagon ESP32]]></summary></entry><entry><title type="html">Authenticating to AWS from GitHub actions</title><link href="https://tales.fromprod.com/2024/234/github-actions-auth-to-AWS.html" rel="alternate" type="text/html" title="Authenticating to AWS from GitHub actions" /><published>2024-08-21T09:00:00+00:00</published><updated>2024-08-21T09:00:00+00:00</updated><id>https://tales.fromprod.com/2024/234/github-actions-auth-to-AWS</id><content type="html" xml:base="https://tales.fromprod.com/2024/234/github-actions-auth-to-AWS.html"><![CDATA[<h1 id="authenticating-to-aws-from-github-actions-for-multiple-aws-accounts">Authenticating to AWS from GitHub actions for multiple AWS accounts</h1>

<p>If you’re doing any sort of Infra as code on GitHub, and have AWS estate you’re going to have to authenticate somehow.</p>

<p>You’ve two main options for doing this</p>

<ul>
  <li>Creating an IAM user in AWS which requires manual key rotation and doesn’t follow best practices (Don’t do this)</li>
  <li>Using <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html">OIDC</a> so you don’t directly have to deal with credentials</li>
</ul>

<h2 id="using-oidc-to-authenticate-to-aws-from-github">Using OIDC to authenticate to AWS from GitHub</h2>

<p>Guides used</p>

<ul>
  <li><a href="https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services">https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services</a></li>
  <li><a href="https://aws.amazon.com/blogs/security/use-iam-roles-to-connect-github-actions-to-actions-in-aws/">https://aws.amazon.com/blogs/security/use-iam-roles-to-connect-github-actions-to-actions-in-aws/</a></li>
</ul>

<h3 id="account-layout">Account layout</h3>

<ul>
  <li>AWS Organisation
    <ul>
      <li>Shared Services</li>
      <li>Development</li>
      <li>Production</li>
      <li>…</li>
    </ul>
  </li>
</ul>

<h3 id="iam-considerations">IAM considerations</h3>

<ul>
  <li>I wanted teams to only have to add an IAM role if they needed some new access and it should “just work”</li>
  <li>The solution should only allow access to AWS IAM roles that have “opted in”</li>
  <li>The teams should be able to limit their access to their specific repos or Github workflows.</li>
</ul>

<h3 id="how-does-it-work">How does it work?</h3>

<ul>
  <li>AWS Organisation
    <ul>
      <li>Shared Services (0000000000)
        <ul>
          <li>Identity Provider - Github OIDC</li>
          <li>Github Assumed role - GithubRole</li>
        </ul>
      </li>
      <li>Development (1111111111)
        <ul>
          <li>Team managed role - DevelopmentDeployerRole</li>
        </ul>
      </li>
      <li>Production (2222222222)
        <ul>
          <li>Team managed role - ProductionDeployerRole</li>
        </ul>
      </li>
      <li>…</li>
    </ul>
  </li>
</ul>

<p>Github workflows request a JWT from Github, and then use this to assume the <code class="language-plaintext highlighter-rouge">GithubRole</code>
They then use the sts token they received from AWS to assume the <code class="language-plaintext highlighter-rouge">DevelopmentDeployerRole</code> or <code class="language-plaintext highlighter-rouge">ProductionDeployerRole</code> and do whatever they need to.</p>

<h3 id="details-of-how-it-actually-works">Details of how it actually works</h3>

<h4 id="example-github-workflow">Example github workflow</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jobs:
  push:
    name: Push to ECR
    runs-on: ubuntu-latest

    steps:

	  # Do your building before
      - name: Configure initial AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::0000000000:role/GithubRole"
          aws-region: $

      - name: Configure AWS credentials for specific container registry
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::1111111111:role/DevelopmentDeployerRole"
          aws-region: $
          role-chaining: true
          role-skip-session-tagging: true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: 1111111111.dkr.ecr.eu-west-1.amazonaws.com/hello-repository
	# Do the actually pushing following
      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: 1111111111.dkr.ecr.eu-west-1.amazonaws.com/hello-repository
          IMAGE_TAG: 00001
        run: |
          docker build "$" -f "$" -t "$ECR_REGISTRY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY"
          echo "image_tag=$IMAGE_TAG"
          echo "full_image=$ECR_REGISTRY:$IMAGE_TAG"
permissions:
  id-token: write # required to issue a Github JWT to use against AWS
  contents: read # to actually read the repo to build your code
</code></pre></div></div>

<h4 id="example-configuration-identity-provider---github-oidc">Example configuration <code class="language-plaintext highlighter-rouge">Identity Provider - Github OIDC</code></h4>

<p>This is an example from typescript using the <a href="https://docs.aws.amazon.com/cdk/v2/guide/work-with-cdk-typescript.html">AWS CDK</a>, within a CDK Stack</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">githubAuthProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">aws_iam</span><span class="p">.</span><span class="nx">OpenIdConnectProvider</span><span class="p">(</span>
  <span class="k">this</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">GithubActions</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">{</span>
    <span class="na">url</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://token.actions.githubusercontent.com</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">clientIds</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">sts.amazonaws.com</span><span class="dl">"</span><span class="p">],</span>
    <span class="na">thumbprints</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">74f3a68f16524f15424927704c9506f55a9316bd</span><span class="dl">"</span><span class="p">],</span> <span class="c1">// Found by hand following https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc_verify-thumbprint.html</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div>

<h4 id="example-configuration-github-assumed-role---githubrole">Example configuration <code class="language-plaintext highlighter-rouge">Github Assumed role - GithubRole</code></h4>

<p>This is an example from typescript using the <a href="https://docs.aws.amazon.com/cdk/v2/guide/work-with-cdk-typescript.html">AWS CDK</a>, within a CDK Stack</p>

<p>This would allow all github workflows for all repos in your Github Organisation <code class="language-plaintext highlighter-rouge">example-org</code> to assume suitably tagged roles, regardless of account.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">githubActionsRole</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">aws_iam</span><span class="p">.</span><span class="nx">Role</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">"</span><span class="s2">GithubActionsRole</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">roleName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GithubActionsRole</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// Must be static to make cross account auth easier</span>
  <span class="na">assumedBy</span><span class="p">:</span> <span class="k">new</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">aws_iam</span><span class="p">.</span><span class="nx">PrincipalWithConditions</span><span class="p">(</span>
    <span class="k">new</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">aws_iam</span><span class="p">.</span><span class="nx">WebIdentityPrincipal</span><span class="p">(</span>
      <span class="s2">`arn:aws:iam::</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">account</span><span class="p">}</span><span class="s2">:oidc-provider/token.actions.githubusercontent.com`</span>
    <span class="p">),</span>
    <span class="c1">// It's important that this role is locked down to only our github orgs, as otherwise anyone on github could use permissions on our AWS infrastructure.</span>
    <span class="p">{</span>
      <span class="na">StringEquals</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">token.actions.githubusercontent.com:aud</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sts.amazonaws.com</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">StringLike</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">token.actions.githubusercontent.com:sub</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">repo:example-org/*</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// This currently allows all repos in the example-org github org to assume this role.</span>
      <span class="p">},</span>
    <span class="p">}</span>
  <span class="p">),</span>
<span class="p">});</span>
<span class="nx">githubActionsRole</span><span class="p">.</span><span class="nx">addToPolicy</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">aws_iam</span><span class="p">.</span><span class="nx">PolicyStatement</span><span class="p">({</span>
    <span class="na">effect</span><span class="p">:</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">aws_iam</span><span class="p">.</span><span class="nx">Effect</span><span class="p">.</span><span class="nx">ALLOW</span><span class="p">,</span>
    <span class="na">actions</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">sts:AssumeRole</span><span class="dl">"</span><span class="p">],</span>
    <span class="na">resources</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">],</span>
    <span class="c1">// This should only be allowed to assume other roles that explicitly opt in via the tag below.</span>
    <span class="c1">// Prevents this role being able to assume every role in the shared-services account</span>
    <span class="na">conditions</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">StringEquals</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">iam:ResourceTag/example:allow-example-org-github-access</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">true</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">})</span>
<span class="p">);</span>
</code></pre></div></div>

<h4 id="example-configuration---team-managed-role---developmentdeployerrole">Example configuration - <code class="language-plaintext highlighter-rouge">Team managed role - DevelopmentDeployerRole</code></h4>

<p>This is an example from typescript using the <a href="https://docs.aws.amazon.com/cdk/v2/guide/work-with-cdk-typescript.html">AWS CDK</a>, within a CDK Stack</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// For the assumeRoleChain</span>
<span class="kd">const</span> <span class="nx">githubActionsRole</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">aws_iam</span><span class="p">.</span><span class="nx">Role</span><span class="p">(</span>
  <span class="k">this</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">DevelopmentDeployerRole</span><span class="dl">"</span><span class="p">,</span>

  <span class="p">{</span>
    <span class="na">roleName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">DevelopmentDeployerRole</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// Must be static since it's referenced in GitHub Actions resources</span>
    <span class="na">assumedBy</span><span class="p">:</span> <span class="k">new</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">aws_iam</span><span class="p">.</span><span class="nx">PrincipalWithConditions</span><span class="p">(</span>
      <span class="k">new</span> <span class="nx">cdk</span><span class="p">.</span><span class="nx">aws_iam</span><span class="p">.</span><span class="nx">ArnPrincipal</span><span class="p">(</span>
        <span class="dl">"</span><span class="s2">arn:aws:sts::0000000000:assumed-role/GithubRole/GitHubActions</span><span class="dl">"</span>
      <span class="p">),</span>
      <span class="p">{</span>
        <span class="c1">// Able to add conditions here to limit to specific repos / workflows</span>
        <span class="na">StringLike</span><span class="p">:</span> <span class="p">{</span>
          <span class="dl">"</span><span class="s2">token.actions.githubusercontent.com:sub</span><span class="dl">"</span><span class="p">:</span>
            <span class="dl">"</span><span class="s2">repo:example-org/repo-frontend/*</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// This allows workflows from only the `repo-frontend` repo in the example-org organisation to assume the role via the chaining.</span>
        <span class="p">},</span>
      <span class="p">}</span>
    <span class="p">),</span>
  <span class="p">}</span>
<span class="p">);</span>
<span class="c1">// Github Action role limited to only assume roles with this tag</span>
<span class="nx">cdk</span><span class="p">.</span><span class="nx">Tags</span><span class="p">.</span><span class="k">of</span><span class="p">(</span><span class="nx">githubActionsRole</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">example:allow-example-org-github-access</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">true</span><span class="dl">"</span>
<span class="p">);</span>

<span class="c1">// now actually add the permissions you want this role to have</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="GitHub" /><summary type="html"><![CDATA[Authenticating to AWS from GitHub actions for multiple AWS accounts]]></summary></entry><entry><title type="html">Recording what you see on macOS - no external dependencies</title><link href="https://tales.fromprod.com/2024/163/apple-screen-recorder.html" rel="alternate" type="text/html" title="Recording what you see on macOS - no external dependencies" /><published>2024-06-11T19:00:00+00:00</published><updated>2024-06-11T19:00:00+00:00</updated><id>https://tales.fromprod.com/2024/163/apple-screen-recorder</id><content type="html" xml:base="https://tales.fromprod.com/2024/163/apple-screen-recorder.html"><![CDATA[<h1 id="recording-what-you-see-on-macos---no-external-dependencies">Recording what you see on macOS - no external dependencies</h1>

<p>Without installing <strong>anything</strong> you can automatically record all text shown on screen on macOS and do whatever you want on it.</p>

<p>This is published for informational purposes, and to illustrate how difficult “data loss prevention” is, when the very OS you’re using is working against you.</p>

<p>I wish I’d published this before the whole <a href="https://support.microsoft.com/en-gb/windows/retrace-your-steps-with-recall-aa03f8a0-a78b-4b3e-b0a1-2eb8ac48701c">Windows Recall thing</a> but hindsight is 20/20.</p>

<h2 id="applescript">AppleScript</h2>

<p>Built in to macOS is <code class="language-plaintext highlighter-rouge">script editor</code> and <code class="language-plaintext highlighter-rouge">automator</code> which can use a proprietary scripting language called <code class="language-plaintext highlighter-rouge">AppleScript</code> which can be used to do everything a mac or iOS app can do, with a few extra niceties. In my opinion it’s very ugly and hard to use as it tries to act like natural prose rather than be an actual compute  language. One example is using <code class="language-plaintext highlighter-rouge">class's method</code> rather than class.method.</p>

<p>The <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html">documentation</a> is very out of date, though it still works so you’ll have to find information on <a href="https://www.macscripter.net">forums.</a></p>

<h2 id="so-what">So what?</h2>

<ul>
  <li>Open spotlight</li>
  <li>Open “script editor”</li>
  <li>Paste the code below in the window and save it</li>
  <li>Click “Run this script” button which looks like a play button</li>
  <li>See that all text on your screen is now in the script output window.</li>
</ul>

<p>Congratulations, without installing <em>anything</em> you’ve managed to make something which can recover all text that shows on your macOS display.</p>

<p>Apple don’t give you a way to disable AppleScript so I’m not aware of a way to prevent this functionality.</p>

<h3 id="sample-code">Sample code</h3>

<p>Please only use this for innocent fun, where you have permission.</p>

<p>This snippet is provided under an <a href="https://github.com/git/git-scm.com/blob/main/MIT-LICENSE.txt">MIT license</a> and I hold no responsibility for how you choose to use it.</p>

<div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"AppKit"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"Foundation"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"Vision"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">scripting</span><span class="w"> </span><span class="nv">additions</span><span class="w">



</span><span class="c1">-- based on https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ReadandWriteFiles.html</span><span class="w">
</span><span class="k">on</span> <span class="nv">writeTextToFile</span><span class="p">(</span><span class="nv">theText</span><span class="p">,</span><span class="w"> </span><span class="nv">theFile</span><span class="p">,</span><span class="w"> </span><span class="nv">overwriteExistingContent</span><span class="p">)</span><span class="w">
	</span><span class="k">try</span><span class="w">

		</span><span class="c1">-- Convert the file to a string</span><span class="w">
		</span><span class="k">set</span><span class="w"> </span><span class="nv">theFile</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">theFile</span><span class="w"> </span><span class="k">as </span><span class="nc">string</span><span class="w">

		</span><span class="c1">-- Open the file for writing</span><span class="w">
		</span><span class="k">set</span><span class="w"> </span><span class="nv">theOpenedFile</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">open for access</span><span class="w"> </span><span class="nv">file</span><span class="w"> </span><span class="nv">theFile</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="nb">write</span><span class="w"> </span><span class="nv">permission</span><span class="w">

		</span><span class="c1">-- Clear the file if content should be overwritten</span><span class="w">
		</span><span class="k">if</span><span class="w"> </span><span class="nv">overwriteExistingContent</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="nb">set eof</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">theOpenedFile</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="mi">0</span><span class="w">

		</span><span class="c1">-- Write the new content to the file</span><span class="w">
		</span><span class="nb">write</span><span class="w"> </span><span class="nv">theText</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">theOpenedFile</span><span class="w"> </span><span class="nv">starting</span><span class="w"> </span><span class="nb">at</span><span class="w"> </span><span class="nv">eof</span><span class="w">

		</span><span class="c1">-- Close the file</span><span class="w">
		</span><span class="nb">close access</span><span class="w"> </span><span class="nv">theOpenedFile</span><span class="w">

		</span><span class="c1">-- Return a boolean indicating that writing was successful</span><span class="w">
		</span><span class="nb">return</span><span class="w"> </span><span class="nb">true</span><span class="w">

		</span><span class="c1">-- Handle a write error</span><span class="w">
	</span><span class="nb">on</span><span class="w"> </span><span class="k">error</span><span class="w">

		</span><span class="c1">-- Close the file</span><span class="w">
		</span><span class="k">try</span><span class="w">
			</span><span class="nb">close access</span><span class="w"> </span><span class="nv">file</span><span class="w"> </span><span class="nv">theFile</span><span class="w">
		</span><span class="k">end</span><span class="w"> </span><span class="k">try</span><span class="w">

		</span><span class="c1">-- Return a boolean indicating that writing failed</span><span class="w">
		</span><span class="nb">return</span><span class="w"> </span><span class="nb">false</span><span class="w">
	</span><span class="k">end</span><span class="w"> </span><span class="k">try</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">writeTextToFile</span><span class="w">

</span><span class="c1">-- based on https://www.macscripter.net/t/image-png-to-text-through-applescript/74490/6</span><span class="w">
</span><span class="k">on</span> <span class="nv">getScreenText</span><span class="p">()</span><span class="w">
	</span><span class="nb">do shell script</span><span class="w"> </span><span class="s2">"screencapture -c "</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">thePasteboard</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">current application</span>'s <span class="nv">NSPasteboard</span>'s <span class="nv">generalPasteboard</span><span class="p">()</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">imageData</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">thePasteboard</span>'s <span class="nv">dataForType</span><span class="p">:(</span><span class="nb">current application</span>'s <span class="nv">NSPasteboardTypeTIFF</span><span class="p">)</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">requestHandler</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">current application</span>'s <span class="nv">VNImageRequestHandler</span>'s <span class="nv">alloc</span><span class="p">()</span>'s <span class="nv">initWithData</span><span class="p">:</span><span class="nv">imageData</span><span class="w"> </span><span class="nv">options</span><span class="p">:(</span><span class="nb">current application</span>'s <span class="nv">NSDictionary</span>'s <span class="nv">alloc</span><span class="p">()</span>'s <span class="nv">init</span><span class="p">())</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">theRequest</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">current application</span>'s <span class="nv">VNRecognizeTextRequest</span>'s <span class="nv">alloc</span><span class="p">()</span>'s <span class="nv">init</span><span class="p">()</span><span class="w">
	</span><span class="nv">requestHandler</span>'s <span class="nv">performRequests</span><span class="p">:(</span><span class="nb">current application</span>'s <span class="nv">NSArray</span>'s <span class="nv">arrayWithObject</span><span class="p">:(</span><span class="nv">theRequest</span><span class="p">))</span><span class="w"> </span><span class="err">|</span><span class="k">error</span><span class="err">|</span><span class="p">:(</span><span class="nb">missing value</span><span class="p">)</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">theResults</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">theRequest</span>'s <span class="nv">results</span><span class="p">()</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">theText</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="p">{}</span><span class="w">
	</span><span class="k">repeat</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="nv">observation</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nv">theResults</span><span class="w">
		</span><span class="nb">copy</span><span class="w"> </span><span class="p">((</span><span class="nb">first</span><span class="w"> </span><span class="nb">item</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="nv">observation</span>'s <span class="nv">topCandidates</span><span class="p">:</span><span class="mi">1</span><span class="p">))</span>'s <span class="err">|</span><span class="nv">string</span><span class="err">|</span><span class="p">()</span><span class="w"> </span><span class="k">as </span><span class="nc">text</span><span class="p">)</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">end</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">theText</span><span class="w">
	</span><span class="k">end</span><span class="w"> </span><span class="k">repeat</span><span class="w">
	</span><span class="nb">return</span><span class="w"> </span><span class="nv">theText</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getScreenText</span><span class="w">

</span><span class="k">on</span> <span class="nb">run</span><span class="w"> </span><span class="p">(</span><span class="nv">argv</span><span class="p">)</span><span class="w">
	</span><span class="nv">getScreenText</span><span class="p">()</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nb">run</span><span class="w">
</span></code></pre></div></div>

<h2 id="limitations">Limitations</h2>

<p>This version does not continue to run, nor write the captured text to a file or send it to a server so isn’t currently much use for much more than a proof of concept.</p>

<p>This version doesn’t work in automator for reasons I don’t understand, so you can’t easily trigger it from a key press.</p>

<p>It uses <code class="language-plaintext highlighter-rouge">screencapture</code> by shelling out, so this is quite easy to detect. I’m sure there are ways to do a screenshot more directly which would avoid this obvious detection. This can probably be avoided by using <a href="https://developer.apple.com/documentation/screencapturekit/scshareablecontent/3916733-getshareablecontentwithcompletio?language=objc">ScreenCaptureKit</a> but I couldn’t work out the syntax in AppleScript.</p>]]></content><author><name></name></author><category term="macOS" /><category term="APIs" /><category term="Machine Learning" /><summary type="html"><![CDATA[Recording what you see on macOS - no external dependencies]]></summary></entry><entry><title type="html">Making a self hosted link summariser</title><link href="https://tales.fromprod.com/2024/126/self-hosted-link-summariser.html" rel="alternate" type="text/html" title="Making a self hosted link summariser" /><published>2024-05-05T19:00:00+00:00</published><updated>2024-05-05T19:00:00+00:00</updated><id>https://tales.fromprod.com/2024/126/self-hosted-link-summariser</id><content type="html" xml:base="https://tales.fromprod.com/2024/126/self-hosted-link-summariser.html"><![CDATA[<h1 id="making-a-self-hosted-link-summariser-using-llms">Making a self hosted link summariser using LLMs</h1>

<p>If you use Reddit or Lemmy you are likely to be familiar with those bots which summarise news links and comment the result. I decided to make one of these which uses an LLM to do the summarisation</p>

<h2 id="step-1-get-the-websites-text">Step 1: Get the website’s text</h2>

<p>For this you want to get the page’s HTML, and remove anything that won’t help the bot such as javascript, CSS, images or videos. You’ll also want to get rid of excessive spaces or newlines as they’ll take up tokens that could be used for more words</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="n">standardizeSpaces</span><span class="p">(</span><span class="n">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">strings</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">strings</span><span class="o">.</span><span class="n">Fields</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="s">" "</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">scrapeSite</span><span class="p">(</span><span class="n">url</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">resp</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Failed to get site"</span><span class="p">,</span> <span class="s">"site"</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

	<span class="n">doc</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">goquery</span><span class="o">.</span><span class="n">NewDocumentFromReader</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Failed to get site body"</span><span class="p">,</span> <span class="s">"site"</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"img"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>
	<span class="c">// We don't care about images, we only want the text on the site</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"picture"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>
	<span class="c">// We don't care about scripts, we only want the text on the site</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"script"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>
	<span class="c">// We don't care about css, we only want the text on the site</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"style"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>
	<span class="c">// We don't care about videos, we only want the text on the site</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"video"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>

	<span class="c">// There's unlikely to be anything we want in these</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"noscript"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>

	<span class="c">// remove excess newlines etc</span>
	<span class="n">bdyText</span> <span class="o">:=</span> <span class="n">standardizeSpaces</span><span class="p">(</span><span class="n">doc</span><span class="o">.</span><span class="n">Text</span><span class="p">())</span>
	<span class="n">slog</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="n">bdyText</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">bdyText</span><span class="p">,</span> <span class="n">err</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="step-2-use-the-llm-to-summarise-the-text">Step 2: Use the LLM to summarise the text</h2>

<p>For this you’ll need to truncate the content from the site if it’s too long, and send it over to the LLM, with a prompt and “thought” that it should do this.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="n">doSummarisation</span><span class="p">(</span><span class="n">token</span> <span class="kt">string</span><span class="p">,</span> <span class="n">maxTokens</span> <span class="kt">int</span><span class="p">,</span> <span class="n">server</span> <span class="kt">string</span><span class="p">,</span> <span class="n">model</span> <span class="kt">string</span><span class="p">,</span> <span class="n">siteText</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="n">summary</span> <span class="kt">string</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>

	<span class="n">lengthOfDataToSend</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">siteText</span><span class="p">)</span>

	<span class="c">// Just a rule of thumb</span>
	<span class="n">likelyMaximumLengthAccepted</span> <span class="o">:=</span> <span class="m">2</span> <span class="o">*</span> <span class="n">maxTokens</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">siteText</span><span class="p">)</span> <span class="o">&gt;</span> <span class="m">2</span><span class="o">*</span><span class="n">likelyMaximumLengthAccepted</span> <span class="p">{</span>
		<span class="n">lengthOfDataToSend</span> <span class="o">=</span> <span class="m">2</span> <span class="o">*</span> <span class="n">likelyMaximumLengthAccepted</span>
	<span class="p">}</span>

	<span class="n">aiClient</span> <span class="o">:=</span> <span class="n">openai</span><span class="o">.</span><span class="n">DefaultConfig</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
	<span class="n">aiClient</span><span class="o">.</span><span class="n">BaseURL</span> <span class="o">=</span> <span class="n">server</span>
	<span class="n">client</span> <span class="o">:=</span> <span class="n">openai</span><span class="o">.</span><span class="n">NewClientWithConfig</span><span class="p">(</span><span class="n">aiClient</span><span class="p">)</span>

	<span class="n">stream</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">client</span><span class="o">.</span><span class="n">CreateChatCompletionStream</span><span class="p">(</span>
		<span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span>
		<span class="n">openai</span><span class="o">.</span><span class="n">ChatCompletionRequest</span><span class="p">{</span>
			<span class="n">Model</span><span class="o">:</span> <span class="n">model</span><span class="p">,</span>
			<span class="n">Messages</span><span class="o">:</span> <span class="p">[]</span><span class="n">openai</span><span class="o">.</span><span class="n">ChatCompletionMessage</span><span class="p">{</span>
				<span class="p">{</span><span class="n">Role</span><span class="o">:</span> <span class="n">openai</span><span class="o">.</span><span class="n">ChatMessageRoleSystem</span><span class="p">,</span>
					<span class="n">Content</span><span class="o">:</span> <span class="s">"You are an expert at summarising text in a concise manner for intelligent social media users."</span><span class="p">,</span>
				<span class="p">},</span>
				<span class="p">{</span>
					<span class="n">Role</span><span class="o">:</span> <span class="n">openai</span><span class="o">.</span><span class="n">ChatMessageRoleUser</span><span class="p">,</span>
					<span class="n">Content</span><span class="o">:</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"Summarise the following text using the fewest possible words</span><span class="se">\n</span><span class="s">, %s"</span><span class="p">,</span>
						<span class="n">siteText</span><span class="p">[</span><span class="o">:</span><span class="n">lengthOfDataToSend</span><span class="o">-</span><span class="m">1</span><span class="p">]),</span>
				<span class="p">},</span>
			<span class="p">},</span>
			<span class="n">Stream</span><span class="o">:</span>           <span class="no">true</span><span class="p">,</span>
			<span class="n">Stop</span><span class="o">:</span>             <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"&lt;|end_of_text|&gt;"</span><span class="p">,</span> <span class="s">"&lt;|eot_id|&gt;"</span><span class="p">},</span>
			<span class="n">Temperature</span><span class="o">:</span>      <span class="m">0.7</span><span class="p">,</span>
			<span class="n">TopP</span><span class="o">:</span>             <span class="m">0.95</span><span class="p">,</span>
			<span class="n">MaxTokens</span><span class="o">:</span>        <span class="n">maxTokens</span><span class="p">,</span>
			<span class="n">FrequencyPenalty</span><span class="o">:</span> <span class="m">0.0</span><span class="p">,</span>
			<span class="n">PresencePenalty</span><span class="o">:</span>  <span class="m">0.0</span><span class="p">,</span>
		<span class="p">},</span>
	<span class="p">)</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Error with ChatCompletionStream for summariser"</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">stream</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

	<span class="k">var</span> <span class="n">summaryBuilder</span> <span class="n">strings</span><span class="o">.</span><span class="n">Builder</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="k">var</span> <span class="n">response</span> <span class="n">openai</span><span class="o">.</span><span class="n">ChatCompletionStreamResponse</span>
		<span class="n">response</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">Recv</span><span class="p">()</span>
		<span class="k">if</span> <span class="n">errors</span><span class="o">.</span><span class="n">Is</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">io</span><span class="o">.</span><span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">slog</span><span class="o">.</span><span class="n">Debug</span><span class="p">(</span><span class="s">"Finished receiving response from LLM"</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">summaryBuilder</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span> <span class="no">nil</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Error with ChatCompletionStream for summariser"</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">summaryBuilder</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span> <span class="n">err</span>
		<span class="p">}</span>
		<span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">summaryBuilder</span><span class="o">.</span><span class="n">WriteString</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">Choices</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">Delta</span><span class="o">.</span><span class="n">Content</span><span class="p">)</span>

		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Error with writing stream to summary"</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">summaryBuilder</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span> <span class="n">err</span>
		<span class="p">}</span>

	<span class="p">}</span>
	<span class="c">// Never get here</span>

<span class="p">}</span>

</code></pre></div></div>

<h2 id="the-code">The code</h2>

<p>Full version of this code available at <a href="https://github.com/RichardoC/personal-webpage-summariser">https://github.com/RichardoC/personal-webpage-summariser</a></p>

<p>Better versions exist such as <a href="https://github.com/RikudouSage/LemmyAutoTldrBot">https://github.com/RikudouSage/LemmyAutoTldrBot</a></p>]]></content><author><name></name></author><category term="Golang" /><category term="Go" /><category term="APIs" /><category term="ML" /><category term="LLMs" /><summary type="html"><![CDATA[Making a self hosted link summariser using LLMs]]></summary></entry><entry><title type="html">Backing up Slack-mojis</title><link href="https://tales.fromprod.com/2024/123/backing-up-slackmojis.html" rel="alternate" type="text/html" title="Backing up Slack-mojis" /><published>2024-05-02T20:00:00+00:00</published><updated>2024-05-02T20:00:00+00:00</updated><id>https://tales.fromprod.com/2024/123/backing-up-slackmojis</id><content type="html" xml:base="https://tales.fromprod.com/2024/123/backing-up-slackmojis.html"><![CDATA[<h1 id="backing-up-slackmojis">Backing up Slackmojis</h1>

<p>Recently a slack instance I’m on broke through the 11,000 slackmoji barrier. Given this was a significant usage of people’s time I figured it was worth backing these up in case of a disaster</p>

<h2 id="to-the-docs">To the docs!</h2>

<p>Slack <a href="https://api.slack.com/methods/emoji.list">document</a> an API which returns all slackmoji names and the URL of their images which are accessible without authentication.</p>

<p>Given this it should be pretty easy to download them all.</p>

<h2 id="findings">Findings</h2>

<p>This code downloads several images a second, and is deliberately unthreaded because this is slow enough not to trigger a rate limit.</p>

<h2 id="sample-code">Sample code</h2>
<p>Please only use this for innocent fun, where you have permission as you are downloading data from the instance.</p>

<p>This snippet is provided under an <a href="https://github.com/git/git-scm.com/blob/main/MIT-LICENSE.txt">MIT license</a> and I hold no responsibility for how you choose to use it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">http.client</span><span class="p">,</span> <span class="n">urllib</span><span class="p">.</span><span class="n">parse</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">,</span> <span class="n">shutil</span><span class="p">,</span> <span class="n">glob</span>

<span class="c1"># Replace
# TOKEN with your bearer token like xoxc-
# COOKIE with your browser cookies, you can get this from the network tab
# FOLDER with the full path that you want the slackmojis to be backed up in
</span>
<span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="s">"slack.com"</span><span class="p">)</span>

<span class="n">folder</span> <span class="o">=</span> <span class="s">"FOLDER"</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span> <span class="s">"Content-type"</span><span class="p">:</span> <span class="s">"application/json; charset=utf-8"</span><span class="p">,</span> <span class="s">"Authorization"</span><span class="p">:</span> <span class="s">"Bearer TOKEN"</span><span class="p">,</span> <span class="s">"cookie"</span><span class="p">:</span> <span class="s">"COOKIE"</span><span class="p">}</span>

<span class="n">conn</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="s">"GET"</span><span class="p">,</span> <span class="s">"/api/emoji.list"</span><span class="p">,</span>  <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">getresponse</span><span class="p">()</span>

<span class="n">jsonRepr</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>


<span class="k">for</span> <span class="n">emojiname</span><span class="p">,</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">jsonRepr</span><span class="p">[</span><span class="s">"emoji"</span><span class="p">].</span><span class="n">items</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">emojiname</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">emojiname</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s">"</span>
    <span class="k">print</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>

    <span class="k">if</span> <span class="s">"alias"</span> <span class="ow">in</span> <span class="n">url</span><span class="p">:</span>
        <span class="c1"># Ignoring aliases for now
</span>        <span class="k">continue</span>
    <span class="k">with</span> <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>  <span class="k">as</span> <span class="n">u</span><span class="p">:</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">folder</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="s">'bw+'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="Slack" /><category term="APIs" /><category term="Nonsense" /><summary type="html"><![CDATA[Backing up Slackmojis]]></summary></entry></feed>