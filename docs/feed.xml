<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://tales.fromprod.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://tales.fromprod.com/" rel="alternate" type="text/html" /><updated>2024-06-11T22:44:45+00:00</updated><id>https://tales.fromprod.com/feed.xml</id><title type="html">Tales from Prod</title><subtitle>Welcome to Richard Finlay Tweed&apos;s thoughts on Cloud Native Software, Kubernetes, Production and whatever else he&apos;s been tinkering with.</subtitle><entry><title type="html">Recording what you see on macOS - no external dependencies</title><link href="https://tales.fromprod.com/2024/163/apple-screen-recorder.html" rel="alternate" type="text/html" title="Recording what you see on macOS - no external dependencies" /><published>2024-06-11T19:00:00+00:00</published><updated>2024-06-11T19:00:00+00:00</updated><id>https://tales.fromprod.com/2024/163/apple-screen-recorder</id><content type="html" xml:base="https://tales.fromprod.com/2024/163/apple-screen-recorder.html"><![CDATA[<h1 id="recording-what-you-see-on-macos---no-external-dependencies">Recording what you see on macOS - no external dependencies</h1>

<p>Without installing <strong>anything</strong> you can automatically record all text shown on screen on macOS and do whatever you want on it.</p>

<p>This is published for informational purposes, and to illustrate how difficult “data loss prevention” is, when the very OS you’re using is working against you.</p>

<p>I wish I’d published this before the whole <a href="https://support.microsoft.com/en-gb/windows/retrace-your-steps-with-recall-aa03f8a0-a78b-4b3e-b0a1-2eb8ac48701c">Windows Recall thing</a> but hindsight is 20/20.</p>

<h2 id="applescript">AppleScript</h2>

<p>Built in to macOS is <code class="language-plaintext highlighter-rouge">script editor</code> and <code class="language-plaintext highlighter-rouge">automator</code> which can use a proprietary scripting language called <code class="language-plaintext highlighter-rouge">AppleScript</code> which can be used to do everything a mac or iOS app can do, with a few extra niceties. In my opinion it’s very ugly and hard to use as it tries to act like natural prose rather than be an actual compute  language. One example is using <code class="language-plaintext highlighter-rouge">class's method</code> rather than class.method.</p>

<p>The <a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html">documentation</a> is very out of date, though it still works so you’ll have to find information on <a href="https://www.macscripter.net">forums.</a></p>

<h2 id="so-what">So what?</h2>

<ul>
  <li>Open spotlight</li>
  <li>Open “script editor”</li>
  <li>Paste the code below in the window and save it</li>
  <li>Click “Run this script” button which looks like a play button</li>
  <li>See that all text on your screen is now in the script output window.</li>
</ul>

<p>Congratulations, without installing <em>anything</em> you’ve managed to make something which can recover all text that shows on your macOS display.</p>

<p>Apple don’t give you a way to disable AppleScript so I’m not aware of a way to prevent this functionality.</p>

<h3 id="sample-code">Sample code</h3>

<p>Please only use this for innocent fun, where you have permission.</p>

<p>This snippet is provided under an <a href="https://github.com/git/git-scm.com/blob/main/MIT-LICENSE.txt">MIT license</a> and I hold no responsibility for how you choose to use it.</p>

<div class="language-applescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"AppKit"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"Foundation"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">framework</span><span class="w"> </span><span class="s2">"Vision"</span><span class="w">
</span><span class="nv">use</span><span class="w"> </span><span class="nv">scripting</span><span class="w"> </span><span class="nv">additions</span><span class="w">



</span><span class="c1">-- based on https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/ReadandWriteFiles.html</span><span class="w">
</span><span class="k">on</span> <span class="nv">writeTextToFile</span><span class="p">(</span><span class="nv">theText</span><span class="p">,</span><span class="w"> </span><span class="nv">theFile</span><span class="p">,</span><span class="w"> </span><span class="nv">overwriteExistingContent</span><span class="p">)</span><span class="w">
	</span><span class="k">try</span><span class="w">

		</span><span class="c1">-- Convert the file to a string</span><span class="w">
		</span><span class="k">set</span><span class="w"> </span><span class="nv">theFile</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">theFile</span><span class="w"> </span><span class="k">as </span><span class="nc">string</span><span class="w">

		</span><span class="c1">-- Open the file for writing</span><span class="w">
		</span><span class="k">set</span><span class="w"> </span><span class="nv">theOpenedFile</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">open for access</span><span class="w"> </span><span class="nv">file</span><span class="w"> </span><span class="nv">theFile</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="nb">write</span><span class="w"> </span><span class="nv">permission</span><span class="w">

		</span><span class="c1">-- Clear the file if content should be overwritten</span><span class="w">
		</span><span class="k">if</span><span class="w"> </span><span class="nv">overwriteExistingContent</span><span class="w"> </span><span class="ow">is</span><span class="w"> </span><span class="nb">true</span><span class="w"> </span><span class="k">then</span><span class="w"> </span><span class="nb">set eof</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">theOpenedFile</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="mi">0</span><span class="w">

		</span><span class="c1">-- Write the new content to the file</span><span class="w">
		</span><span class="nb">write</span><span class="w"> </span><span class="nv">theText</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">theOpenedFile</span><span class="w"> </span><span class="nv">starting</span><span class="w"> </span><span class="nb">at</span><span class="w"> </span><span class="nv">eof</span><span class="w">

		</span><span class="c1">-- Close the file</span><span class="w">
		</span><span class="nb">close access</span><span class="w"> </span><span class="nv">theOpenedFile</span><span class="w">

		</span><span class="c1">-- Return a boolean indicating that writing was successful</span><span class="w">
		</span><span class="nb">return</span><span class="w"> </span><span class="nb">true</span><span class="w">

		</span><span class="c1">-- Handle a write error</span><span class="w">
	</span><span class="nb">on</span><span class="w"> </span><span class="k">error</span><span class="w">

		</span><span class="c1">-- Close the file</span><span class="w">
		</span><span class="k">try</span><span class="w">
			</span><span class="nb">close access</span><span class="w"> </span><span class="nv">file</span><span class="w"> </span><span class="nv">theFile</span><span class="w">
		</span><span class="k">end</span><span class="w"> </span><span class="k">try</span><span class="w">

		</span><span class="c1">-- Return a boolean indicating that writing failed</span><span class="w">
		</span><span class="nb">return</span><span class="w"> </span><span class="nb">false</span><span class="w">
	</span><span class="k">end</span><span class="w"> </span><span class="k">try</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">writeTextToFile</span><span class="w">

</span><span class="c1">-- based on https://www.macscripter.net/t/image-png-to-text-through-applescript/74490/6</span><span class="w">
</span><span class="k">on</span> <span class="nv">getScreenText</span><span class="p">()</span><span class="w">
	</span><span class="nb">do shell script</span><span class="w"> </span><span class="s2">"screencapture -c "</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">thePasteboard</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">current application</span>'s <span class="nv">NSPasteboard</span>'s <span class="nv">generalPasteboard</span><span class="p">()</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">imageData</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">thePasteboard</span>'s <span class="nv">dataForType</span><span class="p">:(</span><span class="nb">current application</span>'s <span class="nv">NSPasteboardTypeTIFF</span><span class="p">)</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">requestHandler</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">current application</span>'s <span class="nv">VNImageRequestHandler</span>'s <span class="nv">alloc</span><span class="p">()</span>'s <span class="nv">initWithData</span><span class="p">:</span><span class="nv">imageData</span><span class="w"> </span><span class="nv">options</span><span class="p">:(</span><span class="nb">current application</span>'s <span class="nv">NSDictionary</span>'s <span class="nv">alloc</span><span class="p">()</span>'s <span class="nv">init</span><span class="p">())</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">theRequest</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">current application</span>'s <span class="nv">VNRecognizeTextRequest</span>'s <span class="nv">alloc</span><span class="p">()</span>'s <span class="nv">init</span><span class="p">()</span><span class="w">
	</span><span class="nv">requestHandler</span>'s <span class="nv">performRequests</span><span class="p">:(</span><span class="nb">current application</span>'s <span class="nv">NSArray</span>'s <span class="nv">arrayWithObject</span><span class="p">:(</span><span class="nv">theRequest</span><span class="p">))</span><span class="w"> </span><span class="err">|</span><span class="k">error</span><span class="err">|</span><span class="p">:(</span><span class="nb">missing value</span><span class="p">)</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">theResults</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nv">theRequest</span>'s <span class="nv">results</span><span class="p">()</span><span class="w">
	</span><span class="k">set</span><span class="w"> </span><span class="nv">theText</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="p">{}</span><span class="w">
	</span><span class="k">repeat</span><span class="w"> </span><span class="nv">with</span><span class="w"> </span><span class="nv">observation</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nv">theResults</span><span class="w">
		</span><span class="nb">copy</span><span class="w"> </span><span class="p">((</span><span class="nb">first</span><span class="w"> </span><span class="nb">item</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="nv">observation</span>'s <span class="nv">topCandidates</span><span class="p">:</span><span class="mi">1</span><span class="p">))</span>'s <span class="err">|</span><span class="nv">string</span><span class="err">|</span><span class="p">()</span><span class="w"> </span><span class="k">as </span><span class="nc">text</span><span class="p">)</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">end</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="nv">theText</span><span class="w">
	</span><span class="k">end</span><span class="w"> </span><span class="k">repeat</span><span class="w">
	</span><span class="nb">return</span><span class="w"> </span><span class="nv">theText</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nv">getScreenText</span><span class="w">

</span><span class="k">on</span> <span class="nb">run</span><span class="w"> </span><span class="p">(</span><span class="nv">argv</span><span class="p">)</span><span class="w">
	</span><span class="nv">getScreenText</span><span class="p">()</span><span class="w">
</span><span class="k">end</span><span class="w"> </span><span class="nb">run</span><span class="w">
</span></code></pre></div></div>

<h2 id="limitations">Limitations</h2>

<p>This version does not continue to run, nor write the captured text to a file or send it to a server so isn’t currently much use for much more than a proof of concept.</p>

<p>This version doesn’t work in automator for reasons I don’t understand, so you can’t easily trigger it from a key press.</p>

<p>It uses <code class="language-plaintext highlighter-rouge">screencapture</code> by shelling out, so this is quite easy to detect. I’m sure there are ways to do a screenshot more directly which would avoid this obvious detection. This can probably be avoided by using <a href="https://developer.apple.com/documentation/screencapturekit/scshareablecontent/3916733-getshareablecontentwithcompletio?language=objc">ScreenCaptureKit</a> but I couldn’t work out the syntax in AppleScript.</p>]]></content><author><name></name></author><category term="macOS" /><category term="APIs" /><category term="Machine Learning" /><summary type="html"><![CDATA[Recording what you see on macOS - no external dependencies]]></summary></entry><entry><title type="html">Making a self hosted link summariser</title><link href="https://tales.fromprod.com/2024/126/self-hosted-link-summariser.html" rel="alternate" type="text/html" title="Making a self hosted link summariser" /><published>2024-05-05T19:00:00+00:00</published><updated>2024-05-05T19:00:00+00:00</updated><id>https://tales.fromprod.com/2024/126/self-hosted-link-summariser</id><content type="html" xml:base="https://tales.fromprod.com/2024/126/self-hosted-link-summariser.html"><![CDATA[<h1 id="making-a-self-hosted-link-summariser-using-llms">Making a self hosted link summariser using LLMs</h1>

<p>If you use Reddit or Lemmy you are likely to be familiar with those bots which summarise news links and comment the result. I decided to make one of these which uses an LLM to do the summarisation</p>

<h2 id="step-1-get-the-websites-text">Step 1: Get the website’s text</h2>

<p>For this you want to get the page’s HTML, and remove anything that won’t help the bot such as javascript, CSS, images or videos. You’ll also want to get rid of excessive spaces or newlines as they’ll take up tokens that could be used for more words</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="n">standardizeSpaces</span><span class="p">(</span><span class="n">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">strings</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">strings</span><span class="o">.</span><span class="n">Fields</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="s">" "</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">scrapeSite</span><span class="p">(</span><span class="n">url</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">resp</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Failed to get site"</span><span class="p">,</span> <span class="s">"site"</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

	<span class="n">doc</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">goquery</span><span class="o">.</span><span class="n">NewDocumentFromReader</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Failed to get site body"</span><span class="p">,</span> <span class="s">"site"</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"img"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>
	<span class="c">// We don't care about images, we only want the text on the site</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"picture"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>
	<span class="c">// We don't care about scripts, we only want the text on the site</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"script"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>
	<span class="c">// We don't care about css, we only want the text on the site</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"style"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>
	<span class="c">// We don't care about videos, we only want the text on the site</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"video"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>

	<span class="c">// There's unlikely to be anything we want in these</span>
	<span class="n">doc</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="s">"noscript"</span><span class="p">)</span><span class="o">.</span><span class="n">Each</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">i</span> <span class="kt">int</span><span class="p">,</span> <span class="n">el</span> <span class="o">*</span><span class="n">goquery</span><span class="o">.</span><span class="n">Selection</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">el</span><span class="o">.</span><span class="n">Remove</span><span class="p">()</span>
	<span class="p">})</span>

	<span class="c">// remove excess newlines etc</span>
	<span class="n">bdyText</span> <span class="o">:=</span> <span class="n">standardizeSpaces</span><span class="p">(</span><span class="n">doc</span><span class="o">.</span><span class="n">Text</span><span class="p">())</span>
	<span class="n">slog</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="n">bdyText</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">bdyText</span><span class="p">,</span> <span class="n">err</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="step-2-use-the-llm-to-summarise-the-text">Step 2: Use the LLM to summarise the text</h2>

<p>For this you’ll need to truncate the content from the site if it’s too long, and send it over to the LLM, with a prompt and “thought” that it should do this.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="n">doSummarisation</span><span class="p">(</span><span class="n">token</span> <span class="kt">string</span><span class="p">,</span> <span class="n">maxTokens</span> <span class="kt">int</span><span class="p">,</span> <span class="n">server</span> <span class="kt">string</span><span class="p">,</span> <span class="n">model</span> <span class="kt">string</span><span class="p">,</span> <span class="n">siteText</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="n">summary</span> <span class="kt">string</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>

	<span class="n">lengthOfDataToSend</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">siteText</span><span class="p">)</span>

	<span class="c">// Just a rule of thumb</span>
	<span class="n">likelyMaximumLengthAccepted</span> <span class="o">:=</span> <span class="m">2</span> <span class="o">*</span> <span class="n">maxTokens</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">siteText</span><span class="p">)</span> <span class="o">&gt;</span> <span class="m">2</span><span class="o">*</span><span class="n">likelyMaximumLengthAccepted</span> <span class="p">{</span>
		<span class="n">lengthOfDataToSend</span> <span class="o">=</span> <span class="m">2</span> <span class="o">*</span> <span class="n">likelyMaximumLengthAccepted</span>
	<span class="p">}</span>

	<span class="n">aiClient</span> <span class="o">:=</span> <span class="n">openai</span><span class="o">.</span><span class="n">DefaultConfig</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
	<span class="n">aiClient</span><span class="o">.</span><span class="n">BaseURL</span> <span class="o">=</span> <span class="n">server</span>
	<span class="n">client</span> <span class="o">:=</span> <span class="n">openai</span><span class="o">.</span><span class="n">NewClientWithConfig</span><span class="p">(</span><span class="n">aiClient</span><span class="p">)</span>

	<span class="n">stream</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">client</span><span class="o">.</span><span class="n">CreateChatCompletionStream</span><span class="p">(</span>
		<span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span>
		<span class="n">openai</span><span class="o">.</span><span class="n">ChatCompletionRequest</span><span class="p">{</span>
			<span class="n">Model</span><span class="o">:</span> <span class="n">model</span><span class="p">,</span>
			<span class="n">Messages</span><span class="o">:</span> <span class="p">[]</span><span class="n">openai</span><span class="o">.</span><span class="n">ChatCompletionMessage</span><span class="p">{</span>
				<span class="p">{</span><span class="n">Role</span><span class="o">:</span> <span class="n">openai</span><span class="o">.</span><span class="n">ChatMessageRoleSystem</span><span class="p">,</span>
					<span class="n">Content</span><span class="o">:</span> <span class="s">"You are an expert at summarising text in a concise manner for intelligent social media users."</span><span class="p">,</span>
				<span class="p">},</span>
				<span class="p">{</span>
					<span class="n">Role</span><span class="o">:</span> <span class="n">openai</span><span class="o">.</span><span class="n">ChatMessageRoleUser</span><span class="p">,</span>
					<span class="n">Content</span><span class="o">:</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"Summarise the following text using the fewest possible words</span><span class="se">\n</span><span class="s">, %s"</span><span class="p">,</span>
						<span class="n">siteText</span><span class="p">[</span><span class="o">:</span><span class="n">lengthOfDataToSend</span><span class="o">-</span><span class="m">1</span><span class="p">]),</span>
				<span class="p">},</span>
			<span class="p">},</span>
			<span class="n">Stream</span><span class="o">:</span>           <span class="no">true</span><span class="p">,</span>
			<span class="n">Stop</span><span class="o">:</span>             <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"&lt;|end_of_text|&gt;"</span><span class="p">,</span> <span class="s">"&lt;|eot_id|&gt;"</span><span class="p">},</span>
			<span class="n">Temperature</span><span class="o">:</span>      <span class="m">0.7</span><span class="p">,</span>
			<span class="n">TopP</span><span class="o">:</span>             <span class="m">0.95</span><span class="p">,</span>
			<span class="n">MaxTokens</span><span class="o">:</span>        <span class="n">maxTokens</span><span class="p">,</span>
			<span class="n">FrequencyPenalty</span><span class="o">:</span> <span class="m">0.0</span><span class="p">,</span>
			<span class="n">PresencePenalty</span><span class="o">:</span>  <span class="m">0.0</span><span class="p">,</span>
		<span class="p">},</span>
	<span class="p">)</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Error with ChatCompletionStream for summariser"</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">stream</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

	<span class="k">var</span> <span class="n">summaryBuilder</span> <span class="n">strings</span><span class="o">.</span><span class="n">Builder</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="k">var</span> <span class="n">response</span> <span class="n">openai</span><span class="o">.</span><span class="n">ChatCompletionStreamResponse</span>
		<span class="n">response</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="n">Recv</span><span class="p">()</span>
		<span class="k">if</span> <span class="n">errors</span><span class="o">.</span><span class="n">Is</span><span class="p">(</span><span class="n">err</span><span class="p">,</span> <span class="n">io</span><span class="o">.</span><span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">slog</span><span class="o">.</span><span class="n">Debug</span><span class="p">(</span><span class="s">"Finished receiving response from LLM"</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">summaryBuilder</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span> <span class="no">nil</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Error with ChatCompletionStream for summariser"</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">summaryBuilder</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span> <span class="n">err</span>
		<span class="p">}</span>
		<span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">summaryBuilder</span><span class="o">.</span><span class="n">WriteString</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">Choices</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">Delta</span><span class="o">.</span><span class="n">Content</span><span class="p">)</span>

		<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="n">slog</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Error with writing stream to summary"</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
			<span class="k">return</span> <span class="n">summaryBuilder</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span> <span class="n">err</span>
		<span class="p">}</span>

	<span class="p">}</span>
	<span class="c">// Never get here</span>

<span class="p">}</span>

</code></pre></div></div>

<h2 id="the-code">The code</h2>

<p>Full version of this code available at <a href="https://github.com/RichardoC/personal-webpage-summariser">https://github.com/RichardoC/personal-webpage-summariser</a></p>

<p>Better versions exist such as <a href="https://github.com/RikudouSage/LemmyAutoTldrBot">https://github.com/RikudouSage/LemmyAutoTldrBot</a></p>]]></content><author><name></name></author><category term="Golang" /><category term="Go" /><category term="APIs" /><category term="ML" /><category term="LLMs" /><summary type="html"><![CDATA[Making a self hosted link summariser using LLMs]]></summary></entry><entry><title type="html">Backing up Slack-mojis</title><link href="https://tales.fromprod.com/2024/123/backing-up-slackmojis.html" rel="alternate" type="text/html" title="Backing up Slack-mojis" /><published>2024-05-02T20:00:00+00:00</published><updated>2024-05-02T20:00:00+00:00</updated><id>https://tales.fromprod.com/2024/123/backing-up-slackmojis</id><content type="html" xml:base="https://tales.fromprod.com/2024/123/backing-up-slackmojis.html"><![CDATA[<h1 id="backing-up-slackmojis">Backing up Slackmojis</h1>

<p>Recently a slack instance I’m on broke through the 11,000 slackmoji barrier. Given this was a significant usage of people’s time I figured it was worth backing these up in case of a disaster</p>

<h2 id="to-the-docs">To the docs!</h2>

<p>Slack <a href="https://api.slack.com/methods/emoji.list">document</a> an API which returns all slackmoji names and the URL of their images which are accessible without authentication.</p>

<p>Given this it should be pretty easy to download them all.</p>

<h2 id="findings">Findings</h2>

<p>This code downloads several images a second, and is deliberately unthreaded because this is slow enough not to trigger a rate limit.</p>

<h2 id="sample-code">Sample code</h2>
<p>Please only use this for innocent fun, where you have permission as you are downloading data from the instance.</p>

<p>This snippet is provided under an <a href="https://github.com/git/git-scm.com/blob/main/MIT-LICENSE.txt">MIT license</a> and I hold no responsibility for how you choose to use it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">http.client</span><span class="p">,</span> <span class="n">urllib</span><span class="p">.</span><span class="n">parse</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">,</span> <span class="n">shutil</span><span class="p">,</span> <span class="n">glob</span>

<span class="c1"># Replace
# TOKEN with your bearer token like xoxc-
# COOKIE with your browser cookies, you can get this from the network tab
# FOLDER with the full path that you want the slackmojis to be backed up in
</span>
<span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">HTTPSConnection</span><span class="p">(</span><span class="s">"slack.com"</span><span class="p">)</span>

<span class="n">folder</span> <span class="o">=</span> <span class="s">"FOLDER"</span>

<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span> <span class="s">"Content-type"</span><span class="p">:</span> <span class="s">"application/json; charset=utf-8"</span><span class="p">,</span> <span class="s">"Authorization"</span><span class="p">:</span> <span class="s">"Bearer TOKEN"</span><span class="p">,</span> <span class="s">"cookie"</span><span class="p">:</span> <span class="s">"COOKIE"</span><span class="p">}</span>

<span class="n">conn</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="s">"GET"</span><span class="p">,</span> <span class="s">"/api/emoji.list"</span><span class="p">,</span>  <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="n">getresponse</span><span class="p">()</span>

<span class="n">jsonRepr</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>


<span class="k">for</span> <span class="n">emojiname</span><span class="p">,</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">jsonRepr</span><span class="p">[</span><span class="s">"emoji"</span><span class="p">].</span><span class="n">items</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">emojiname</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">emojiname</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">url</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'.'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s">"</span>
    <span class="k">print</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>

    <span class="k">if</span> <span class="s">"alias"</span> <span class="ow">in</span> <span class="n">url</span><span class="p">:</span>
        <span class="c1"># Ignoring aliases for now
</span>        <span class="k">continue</span>
    <span class="k">with</span> <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>  <span class="k">as</span> <span class="n">u</span><span class="p">:</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">folder</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="s">'bw+'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="Slack" /><category term="APIs" /><category term="Nonsense" /><summary type="html"><![CDATA[Backing up Slackmojis]]></summary></entry><entry><title type="html">The challenges of using libraries</title><link href="https://tales.fromprod.com/2024/112/the-challenges-of-using-libraries.html" rel="alternate" type="text/html" title="The challenges of using libraries" /><published>2024-04-21T17:00:00+00:00</published><updated>2024-04-21T17:00:00+00:00</updated><id>https://tales.fromprod.com/2024/112/the-challenges-of-using-libraries</id><content type="html" xml:base="https://tales.fromprod.com/2024/112/the-challenges-of-using-libraries.html"><![CDATA[<h1 id="the-challenges-of-using-libraries">The challenges of using libraries</h1>

<p>With the Jia Tan saga and the <a href="https://en.wikipedia.org/wiki/XZ_Utils_backdoor">xz utils backdoor</a> bringing wider attention to the risks of supply chain tampering, I figured it was worth putting a few numbers to the scale of this challenge.</p>

<h2 id="kube-audit-rest-a-simple-example">kube-audit-rest a simple example</h2>

<p>I maintain <a href="https://github.com/RichardoC/kube-audit-rest">kube-audit-rest</a> so figured it was fair to use this project as an example. While I have done my best to reduce external dependencies (such as not using the Kubernetes <a href="https://pkg.go.dev/k8s.io/client-go">client-go package</a>) I cannot escape them entirely.</p>

<h2 id="finding-out-the-size-of-the-problem">Finding out the size of the problem</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># from your source code repository for your binary</span>
<span class="c"># in this case I've already cloned kube-audit-rest and changed directory to it.</span>
docker run <span class="nt">--rm</span> <span class="nt">-it</span> <span class="nt">-v</span><span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>:/usr/src/code  golang:1.22 

<span class="c"># Moving to the code in the container</span>
<span class="nb">cd</span> /usr/src/code
<span class="c"># build everything</span>
go build <span class="nt">-buildvcs</span><span class="o">=</span><span class="nb">false</span>  <span class="nt">-o</span> <span class="nb">.</span> ./...

<span class="c"># shows all external source code</span>
find /go/pkg <span class="nt">-type</span> f <span class="nt">-name</span> <span class="se">\*</span>.go
| xargs <span class="nb">cat</span> | <span class="nb">wc</span> <span class="nt">-l</span>
<span class="c"># 2211035</span>

<span class="c"># Finding all lines of code used by kube-audit-rest, ignoring autogenerated code</span>
<span class="c"># This will include standard libraries from golang etc that are used</span>
go tool objdump kube-audit-rest  | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">" "</span> <span class="nt">-f</span> 3 |cut <span class="nt">-d</span> <span class="s1">$'</span><span class="se">\t</span><span class="s1">'</span> <span class="nt">-f1</span> |  <span class="nb">grep</span> : | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"autogenerated"</span>| <span class="nb">grep</span> <span class="s2">".go"</span> | <span class="nb">sort</span> <span class="nt">-u</span>  | <span class="nb">wc</span> <span class="nt">-l</span>
<span class="c">#96406</span>

<span class="c"># actual amount of source code</span>
find <span class="nb">.</span> <span class="nt">-type</span> f <span class="nt">-name</span> <span class="se">\*</span>.go | xargs <span class="nb">cat</span> | <span class="nb">wc</span> <span class="nt">-l</span>
1224
<span class="c">#too high, let's only have the real source code rather than anything testing</span>

find <span class="nb">.</span> <span class="nt">-type</span> f <span class="nt">-name</span> <span class="se">\*</span>.go <span class="nt">-not</span> <span class="nt">-name</span> <span class="se">\*</span>_test.go <span class="nt">-not</span> <span class="nt">-name</span> <span class="se">\*</span>mock.go  | <span class="nb">grep</span> <span class="nt">-v</span> testing
518
</code></pre></div></div>

<h2 id="conclusion--what-does-this-mean">Conclusion / What does this mean?</h2>

<p>This simple project has <code class="language-plaintext highlighter-rouge">518</code> direct lines of code, but relies on <code class="language-plaintext highlighter-rouge">2,211,035</code> lines of code, of which <code class="language-plaintext highlighter-rouge">96,406</code> make it in to the binary I ship.</p>

<p>In other words only <code class="language-plaintext highlighter-rouge">0.2%</code> of the code used for this project is visible, and only <code class="language-plaintext highlighter-rouge">0.5%</code> of the code I ship I wrote. This doesn’t even include all the libraries needed to run the container, or the kernel it runs on!</p>

<p>I hope this serves as a wake up call for others, securing the software supply chain and ensuring open source developers get suitable support is critically important.</p>

<h2 id="caveats">Caveats</h2>

<ul>
  <li>The total source of all libraries includes all test dependencies</li>
  <li>Autogenerated code is ignored because it’s hard to measure</li>
  <li>This includes blank lines/import statements/etc for ease of calculation</li>
</ul>]]></content><author><name></name></author><category term="Golang" /><category term="Go" /><summary type="html"><![CDATA[The challenges of using libraries]]></summary></entry><entry><title type="html">Using your own hardware for llms</title><link href="https://tales.fromprod.com/2024/111/using-your-own-hardware-for-llms.html" rel="alternate" type="text/html" title="Using your own hardware for llms" /><published>2024-04-20T10:00:00+00:00</published><updated>2024-04-20T10:00:00+00:00</updated><id>https://tales.fromprod.com/2024/111/using-your-own-hardware-for-llms</id><content type="html" xml:base="https://tales.fromprod.com/2024/111/using-your-own-hardware-for-llms.html"><![CDATA[<h1 id="using-your-own-hardware-for-llms">Using your own hardware for llms</h1>

<p>Things have come a long way since <a href="/2023/099/getting-started-with-llms-locally.html">this post</a></p>

<p>This article assumes you have a powerful machine (referred to as “server”) and you want to use that for running the models (inference) and want to actually interact with them from another machine (referred to as “client”).</p>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>Jan.ai installed on both the server and client machines</li>
  <li>A specific model of your choice downloaded on the server</li>
  <li>Network connectivity possible between the client and server (e.g., firewalls configured correctly)</li>
</ul>

<h2 id="setting-up-the-server">Setting up the server</h2>

<p>After installing the models in Jan.ai on the server, click on “Local API Server” located near the bottom left corner of the window.</p>

<p>On the hosting page use the following settings</p>
<ul>
  <li>Set the host IP to “0.0.0.0”</li>
  <li>Choose any desired port number</li>
  <li>In Model Settings, select the model you have already downloaded</li>
  <li>Click “Start Server” to initiate the local API server.</li>
</ul>

<h2 id="setting-up-the-client">Setting up the client</h2>

<ul>
  <li>Navigate to the Jan.ai configuration folder, which can be found in Settings -&gt; Advanced Settings -&gt; Jan Data Folder.</li>
  <li>Create a file named <code class="language-plaintext highlighter-rouge">model.json</code> at the path <code class="language-plaintext highlighter-rouge">models/local-local/model.json</code>.</li>
  <li>Add the following content to the <code class="language-plaintext highlighter-rouge">model.json</code> file, replacing <code class="language-plaintext highlighter-rouge">$MODEL_ID</code> with your server’s model ID such as <code class="language-plaintext highlighter-rouge">hermes-pro-7b</code>:</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"sources"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://jan.ai"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$MODEL_ID"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"object"</span><span class="p">:</span><span class="w"> </span><span class="s2">"model"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"local test"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Test server"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"format"</span><span class="p">:</span><span class="w"> </span><span class="s2">"api"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"settings"</span><span class="p">:</span><span class="w"> </span><span class="p">{},</span><span class="w">
  </span><span class="nl">"metadata"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">"test"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"remote"</span><span class="p">]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"engine"</span><span class="p">:</span><span class="w"> </span><span class="s2">"openai"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"state"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ready"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>Restart the Jan.ai application on the client machine.</li>
  <li>Access Settings -&gt; OpenAI Inference Engine and enter <code class="language-plaintext highlighter-rouge">http://$IP:$PORT/v1/chat/completions</code> in the “Chat Completions Endpoint” field, replacing $IP with your server’s IP address and $PORT with the chosen port number on the server. Leave the API key blank or it won’t work.</li>
</ol>

<h2 id="using-the-model-running-on-your-server">Using the model running on your server</h2>

<p>Using the Model Running on Your Server:</p>
<ol>
  <li>Create a new thread in the Jan.ai application on the client machine.</li>
  <li>In the model dropdown menu on the right, select “remote” and then choose “local test”.</li>
  <li>Start sending messages as usual and (hopefully) have a faster experience.</li>
</ol>

<p>Congratulations, you’re now performing inference on another machine!</p>

<h2 id="conclusion">Conclusion</h2>

<p>By following these steps, you can utilise your own hardware for LLM usage and enjoy the benefits of running models and interacting with them from a remote machine. Enjoy the improved performance, privacy and flexibility offered by this setup.</p>]]></content><author><name></name></author><category term="ML" /><category term="LLMs" /><category term="Jan.ai" /><summary type="html"><![CDATA[Using your own hardware for llms]]></summary></entry><entry><title type="html">Using a video as a Google Meet background</title><link href="https://tales.fromprod.com/2024/082/google-meet-background-videos.html" rel="alternate" type="text/html" title="Using a video as a Google Meet background" /><published>2024-03-22T20:00:00+00:00</published><updated>2024-03-22T20:00:00+00:00</updated><id>https://tales.fromprod.com/2024/082/google-meet-background-videos</id><content type="html" xml:base="https://tales.fromprod.com/2024/082/google-meet-background-videos.html"><![CDATA[<h1 id="using-a-video-as-a-google-meet-background">Using a video as a Google Meet background</h1>

<p><strong>Warning</strong>
This is not officially supported by Google, and could be considered against their <a href="https://support.google.com/meet/answer/9847091">terms of service (specifically “System interference”)</a> so follow this guide at your own risk.</p>

<p><strong>I accept no responsibility for how anyone chooses to use this. As always - Don’t be a pain</strong></p>

<p>Don’t worry, at this time (2024-03-22) it only uses the video, not the audio channel.</p>

<h2 id="requirements">Requirements</h2>

<ul>
  <li>An mp4 video which you have the rights to use</li>
  <li>A browser where you can edit a page’s HTML</li>
  <li>Some patience</li>
</ul>

<h2 id="guide">Guide</h2>

<ul>
  <li>Join a Google Meet call</li>
  <li>click the menu (three vertical dots)</li>
  <li>select Apply visual effects</li>
  <li>Use inspector on the <code class="language-plaintext highlighter-rouge">Add your own personal background</code> button</li>
  <li>You should then see something like <code class="language-plaintext highlighter-rouge">&lt;input type="file" jsname="tif8Pe" jsaction="change:E7zRc" accept="image/jpeg, image/png, image/webp" style="display: none;"&gt;</code> in the HTML
    <ul>
      <li>edit this to include <code class="language-plaintext highlighter-rouge">video/mp4</code></li>
    </ul>
  </li>
  <li>Click the <code class="language-plaintext highlighter-rouge">Add your own personal background</code> button</li>
  <li>Select your mp4 video</li>
</ul>

<p>Congratulations, you’ve now set a video as your background.
The video audio is <em>not</em> sent</p>

<h2 id="dirty-javascript-hacks-to-do-this">Dirty javascript hacks to do this</h2>

<p>** Warning ** This is GPT generated, run at your own risk</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Find the first &lt;input&gt; element with the specific attributes</span>
<span class="kd">const</span> <span class="nx">inputFile</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[type="file"][accept*="image/jpeg"], input[type="file"][accept*="image/png"], input[type="file"][accept*="image/webp"]</span><span class="dl">'</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">inputFile</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Get the current accept attribute value</span>
    <span class="kd">const</span> <span class="nx">currentAcceptValue</span> <span class="o">=</span> <span class="nx">inputFile</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">accept</span><span class="dl">'</span><span class="p">);</span>
    <span class="c1">// Check if "video/mp4" is already included, if not, add it</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">currentAcceptValue</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">'</span><span class="s1">video/mp4</span><span class="dl">'</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">inputFile</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">accept</span><span class="dl">'</span><span class="p">,</span> <span class="s2">`</span><span class="p">${</span><span class="nx">currentAcceptValue</span><span class="p">}</span><span class="s2">, video/mp4`</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="steps-to-using-this-javascript">Steps to using this javascript</h2>

<ul>
  <li>Join a Google Meet call</li>
  <li>Open the developer console</li>
  <li>paste in that javascript and run it</li>
  <li>Click the <code class="language-plaintext highlighter-rouge">Add your own personal background</code> button</li>
  <li>Select your mp4 video</li>
</ul>

<p>Congratulations, you’ve now set a video as your background
The video audio is <em>not</em> sent</p>]]></content><author><name></name></author><category term="Google" /><category term="Nonsense" /><summary type="html"><![CDATA[Using a video as a Google Meet background]]></summary></entry><entry><title type="html">Making a custom GPT with chatgpt for cloudquery data</title><link href="https://tales.fromprod.com/2024/067/custom-chatgpt-cloudquery.html" rel="alternate" type="text/html" title="Making a custom GPT with chatgpt for cloudquery data" /><published>2024-03-07T20:00:00+00:00</published><updated>2024-03-07T20:00:00+00:00</updated><id>https://tales.fromprod.com/2024/067/custom-chatgpt-cloudquery</id><content type="html" xml:base="https://tales.fromprod.com/2024/067/custom-chatgpt-cloudquery.html"><![CDATA[<h1 id="making-a-custom-gpt-with-chatgpt-for-cloudquery-data">Making a custom GPT with chatgpt for cloudquery data</h1>

<p>This assumes you followed <a href="https://help.openai.com/en/articles/8554397-creating-a-gpt">https://help.openai.com/en/articles/8554397-creating-a-gpt</a> and have already generated “instructions” for the GPT.</p>

<p>First get the cloudquery docs
<code class="language-plaintext highlighter-rouge">git clone git@github.com:cloudquery/cloudquery.git</code></p>

<p>Get the cloudquery tables files as these have the relevant schemas and put them in a temporary directory for upload</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /tmp/docs
find <span class="nb">.</span> <span class="nt">-type</span> d <span class="nt">-name</span> <span class="s2">"tables"</span> | xargs <span class="nt">-I</span><span class="o">{}</span> <span class="nb">cp</span> <span class="nt">-r</span> <span class="o">{}</span>/ /tmp/docs/
</code></pre></div></div>
<p>We now have the markdown we want in /tmp/docs/tables</p>

<p>Unfortunately you can only upload 20 files, so we need to cat all these together</p>

<p><code class="language-plaintext highlighter-rouge">cat * &gt; ../schemas.md</code></p>

<p>After that, we need to teach the bot about GoogleSQL as it doesn’t understand it, so copy all the docs from <a href="https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax">https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax</a> and put those into another file called <code class="language-plaintext highlighter-rouge">googlesql.txt</code>.</p>

<p>Now upload these two files (schema.md and googlesql.txt) as “knowledge”</p>

<p>Update your prompt to tell your bot to only use the schema and SQL details that are in its knowledge.</p>

<p>Below is an example of what I used</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
CloudQuery Crafter is designed to handle requests for creating SQL queries based on specific data needs, such as finding all EC2 instances with a public IP. It will access and interpret relevant table schemas from it's knowledge to ensure accurate query generation. For each request, CloudQuery Crafter will provide detailed explanations and the complete SQL query, focusing on clarity and efficiency. It's tailored for users ranging from beginners to experts in SQL, aiming to facilitate their database querying process. CloudQuery Crafter prioritizes providing optimized, ready-to-use queries, including all necessary details such as 'SELECT' fields and 'WHERE' conditions to meet the user's specific request. CloudQuery Crafter should ensure they are providing the correct SQL for the database in use, for example postgres or Bigquery. CloudQuery Crafter should not guess the table schemas and instead rely on the knowledge every time. CloudQuery Crafter can also use queries on https://kmcquade.com/cloudquery/#ec2-instances-with-public-ips to guide it.
Do not invent any tables. If they are not mentioned in CloudQuery Crafter's knowledge they do not exist.
Unless told otherwise, use GoogleSQL SQL dialect which is documented in CloudQuery Crafter's knowledge.
</code></pre></div></div>

<p>This GPT can be used at <a href="https://chat.openai.com/g/g-2guyuhcpP-cloudquery-crafter">https://chat.openai.com/g/g-2guyuhcpP-cloudquery-crafter</a></p>

<p>If you’ve any issues or ideas for improvements, please let me know.</p>]]></content><author><name></name></author><category term="ChatGPT" /><category term="cloudquery" /><summary type="html"><![CDATA[Making a custom GPT with chatgpt for cloudquery data]]></summary></entry><entry><title type="html">Finding secrets on GitLab</title><link href="https://tales.fromprod.com/2024/056/gitlab-secrets.html" rel="alternate" type="text/html" title="Finding secrets on GitLab" /><published>2024-02-25T11:00:00+00:00</published><updated>2024-02-25T11:00:00+00:00</updated><id>https://tales.fromprod.com/2024/056/gitlab-secrets</id><content type="html" xml:base="https://tales.fromprod.com/2024/056/gitlab-secrets.html"><![CDATA[<h1 id="finding-secrets-on-gitlab">Finding secrets on GitLab</h1>

<p>Everyone’s been there before, you included something you shouldn’t have in a commit so you undo the commit and force push.</p>

<p>This data’s gone, right?(!)</p>

<p>This blog post is about finding those mistakenly published commits, and to serve as a reminder that you should always rotate potentially exposed credentials even if you think you’ve deleted them.</p>

<h2 id="how-can-these-missing-commits-still-exist">How can these “missing commits” still exist?</h2>

<p>When you force pushed your branch you rewrote the branch history to no longer reference those commits. This doesn’t remove those commits though, it just detached them from the chain of commits that represents the branch.  commits still exist on the GitLab server despite being inaccessible via the branches.</p>

<p>Here’s a writeup of how this works <a href="https://git-scm.com/book/en/v2/Git-Internals-Maintenance-and-Data-Recovery">locally</a></p>

<h2 id="how-do-we-find-these-missing-commits">How do we find these missing commits</h2>

<p>In theory GitLab have an API for getting commits from a repository, and there’s a parameter for getting <code class="language-plaintext highlighter-rouge">all</code> commits.</p>

<p>As of the time of writing, this API fails to return these dangling commits <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/443263">https://gitlab.com/gitlab-org/gitlab/-/issues/443263</a> which I consider a bug.</p>

<p>However, every time a commit is pushed a <code class="language-plaintext highlighter-rouge">pushed to</code> <a href="https://docs.gitlab.com/ee/api/events.html">event</a> is generated by GitLab. An example of this is below.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">3182909502</span><span class="p">,</span><span class="w">
    </span><span class="nl">"project_id"</span><span class="p">:</span><span class="w"> </span><span class="mi">55263882</span><span class="p">,</span><span class="w">
    </span><span class="nl">"action_name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pushed to"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"target_id"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"target_iid"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"target_type"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"author_id"</span><span class="p">:</span><span class="w"> </span><span class="mi">20255114</span><span class="p">,</span><span class="w">
    </span><span class="nl">"target_title"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="p">,</span><span class="w">
    </span><span class="nl">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-02-24T21:29:08.711Z"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">20255114</span><span class="p">,</span><span class="w">
      </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RichardoC"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Richard Tweed"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"state"</span><span class="p">:</span><span class="w"> </span><span class="s2">"active"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"locked"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
      </span><span class="nl">"avatar_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://secure.gravatar.com/avatar/3af3c4bc67b146186dbd2ef852f8faa16c91d9268e81b7b292168e7dc1fdc7b6?s=80&amp;d=identicon"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"web_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://gitlab.com/RichardoC"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"push_data"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"commit_count"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pushed"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ref_type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"branch"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"commit_from"</span><span class="p">:</span><span class="w"> </span><span class="s2">"31ed8bb6dd627bd38fba1aa350a15136c636c932"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"commit_to"</span><span class="p">:</span><span class="w"> </span><span class="s2">"7faedfa06dd7dda69ca94169c9ec01aa605da08b"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ref"</span><span class="p">:</span><span class="w"> </span><span class="s2">"main"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"commit_title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tidy readme"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"ref_count"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"author_username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"RichardoC"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>These events reference the <code class="language-plaintext highlighter-rouge">commit_from</code> and <code class="language-plaintext highlighter-rouge">commit_to</code> commits. These can be used to generate a set of all commits that actually happened over the last 3 years (they’re only retained for 3 years)</p>

<p>By comparing that set with the official history (the all commits API above) we can find dangling commits, and generate the URL where they can be seen.</p>

<h2 id="very-cool-wheres-the-code">Very cool, where’s the code?</h2>

<p><a href="https://github.com/RichardoC/gitlab-secrets">https://github.com/RichardoC/gitlab-secrets</a></p>

<p>An example Gitlab repo with dangling commits can be found at <a href="https://gitlab.com/gitlab-secrets/gitlab-secrets">https://gitlab.com/gitlab-secrets/gitlab-secrets</a> for you to test this out with</p>

<h2 id="original-idea">Original idea</h2>

<p>This was based on the work by Neodyme where they used this technique to find secrets on <a href="https://neodyme.io/en/blog/github_secrets/">GitHub</a></p>]]></content><author><name></name></author><category term="APIs" /><category term="git" /><summary type="html"><![CDATA[Finding secrets on GitLab]]></summary></entry><entry><title type="html">Misusing kubeconfigs</title><link href="https://tales.fromprod.com/2023/305/misusing-kubeconfigs.html" rel="alternate" type="text/html" title="Misusing kubeconfigs" /><published>2023-11-01T11:00:00+00:00</published><updated>2023-11-01T11:00:00+00:00</updated><id>https://tales.fromprod.com/2023/305/misusing-kubeconfigs</id><content type="html" xml:base="https://tales.fromprod.com/2023/305/misusing-kubeconfigs.html"><![CDATA[<h1 id="misusing-kubeconfigs">Misusing kubeconfigs</h1>

<p>When you use kubectl to do something on a cluster, it iterates through each file listed in the KUBECONFIG environment variable and it uses the first one that matches. This can be a problem if you have multiple contexts with the same name as it’ll choose the first one it finds rather than the one you expected.</p>

<h2 id="auth-provider">auth-provider</h2>

<p>These can be use to provision access tokens when required, https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins</p>

<p>minikube kubectl –ssh  –  get ns</p>

<p>minikube kubectl –ssh –  create ns example-admin
minikube kubectl –ssh –  –namespace example-admin create sa example-admin</p>

<p>minikube kubectl –ssh –  create clusterrolebinding example-admin-binding –clusterrole=cluster-admin  –serviceaccount=example-admin:example-admin</p>

<p>minikube kubectl –ssh –  –names pace example-admin create token example-admin –duration 10m</p>

<p>Turn this in to a blog post</p>

<hr />
<p>apiVersion: v1
clusters:</p>
<ul>
  <li>cluster:
  certificate-authority: /home/rtweed/.minikube/ca.crt
  extensions:
    <ul>
      <li>extension:
  last-update: Thu, 16 Nov 2023 17:17:01 GMT
  provider: minikube.sigs.k8s.io
  version: v1.30.1
name: cluster_info
  server: https://192.168.39.120:8443
name: minikube-manual
contexts:</li>
    </ul>
  </li>
  <li>context:
  cluster: minikube-manual
  user: minikube-manual
name: minikube-manual
current-context: minikube-manual
kind: Config
preferences: {}
users:</li>
  <li>name: minikube-manual
user:
  auth-provider:
    config:
      cmd-args: kubectl –ssh –  –namespace example-admin create token example-admin
        –duration 10m -ojson
      cmd-path: minikube
      expiry-key: ‘{.status.expirationTimestamp}’
      token-key: ‘{.status.token}’
    name: gcp # magic to make this work</li>
</ul>]]></content><author><name></name></author><category term="JSON" /><category term="logging" /><category term="ElasticSearch" /><summary type="html"><![CDATA[Misusing kubeconfigs]]></summary></entry><entry><title type="html">Pass through JSON logs with vector or filebeat</title><link href="https://tales.fromprod.com/2023/305/pass-through-json-logs.html" rel="alternate" type="text/html" title="Pass through JSON logs with vector or filebeat" /><published>2023-11-01T11:00:00+00:00</published><updated>2023-11-01T11:00:00+00:00</updated><id>https://tales.fromprod.com/2023/305/pass-through-json-logs</id><content type="html" xml:base="https://tales.fromprod.com/2023/305/pass-through-json-logs.html"><![CDATA[<h1 id="pass-through-json-logs-with-vector-or-filebeat">Pass through JSON logs with vector or filebeat</h1>

<p>Say you are using an application that emits JSON formatted logs, with one log per line in the log file, and you want to store these in ElasticSearch and view them natively in kibana - how would you manage this?</p>

<p>Both Vector and filebeat have quirks, so I’ve written this guide on how I got these log processors to perform as I wanted - just passing through the original json object so elastic search can parse it as expected</p>

<h2 id="vector">Vector</h2>

<p><a href="https://vector.dev/docs/">Vector</a> is a log processor written in Rust supported by Datadog.</p>

<p>One of the main quirks is that it automatically puts you message in <code class="language-plaintext highlighter-rouge">.message</code> in the data model, with some other metadata that isn’t documented in any single place</p>

<p>Using the snippet below, the logs are read from a series of files in <code class="language-plaintext highlighter-rouge">tmp</code> that have a json object on each line, and are named “my_log” with a suffix</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vector.yaml</span>

<span class="nn">---</span>
<span class="na">healthchecks</span><span class="pi">:</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">require_healthy</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">sources</span><span class="pi">:</span>
  <span class="na">my_application_log_file</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">file</span>
    <span class="na">include</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">/tmp/my-log*</span>
<span class="na">transforms</span><span class="pi">:</span>
  <span class="na">audit_files_json_parser</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">my_application_log_file</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">remap</span>
    <span class="na">source</span><span class="pi">:</span> <span class="pi">|-</span>
      <span class="s">. = parse_json!(.message)</span>
<span class="na">sinks</span><span class="pi">:</span>
  <span class="na">elasticsearch</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">elasticsearch</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">audit_files_json_parser</span>
    <span class="na">auth</span><span class="pi">:</span>
      <span class="na">strategy</span><span class="pi">:</span> <span class="s">basic</span>
      <span class="na">user</span><span class="pi">:</span> <span class="s2">"</span><span class="s">${ELASTICSEARCH_USER}"</span>
      <span class="na">password</span><span class="pi">:</span> <span class="s2">"</span><span class="s">${ELASTICSEARCH_PASSWORD}"</span>
    <span class="na">endpoints</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">${ELASTICSEARCH_URL}"</span><span class="pi">]</span>
    <span class="na">bulk</span><span class="pi">:</span>
      <span class="na">index</span><span class="pi">:</span> <span class="s2">"</span><span class="s">my_application"</span>
      <span class="na">action</span><span class="pi">:</span> <span class="s">create</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s">bulk</span>
</code></pre></div></div>

<h2 id="filebeat">Filebeat</h2>

<p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/index.html">Filebeat</a> is a log processor maintained by Elastic</p>

<p>The equivalent configuration for filebeat is</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">filebeat.inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">filestream</span>
    <span class="na">id</span><span class="pi">:</span> <span class="s">my_application_log_file</span>
    <span class="na">paths</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">/tmp/my-log*</span>

<span class="na">processors</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">decode_json_fields</span><span class="pi">:</span>
      <span class="na">fields</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">message</span><span class="pi">]</span>
      <span class="na">process_array</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">max_depth</span><span class="pi">:</span> <span class="m">2</span>
      <span class="na">overwrite_keys</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">add_error_key</span><span class="pi">:</span> <span class="no">true</span>
  <span class="pi">-</span> <span class="na">move_fields</span><span class="pi">:</span>
      <span class="na">from</span><span class="pi">:</span> <span class="s2">"</span><span class="s">message"</span>
      <span class="na">fields</span><span class="pi">:</span> <span class="pi">[]</span>
      <span class="na">to</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span> <span class="c1"># move message fields up to root</span>

<span class="na">output.elasticsearch</span><span class="pi">:</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">${ELASTICSEARCH_URL}'</span><span class="pi">]</span>
  <span class="na">username</span><span class="pi">:</span> <span class="s">${ELASTICSEARCH_USER}</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s">${ELASTICSEARCH_PASSWORD}</span>
  <span class="na">index</span><span class="pi">:</span> <span class="s">my_application</span>
  <span class="na">bulk_max_size</span><span class="pi">:</span> <span class="m">50</span>
  <span class="na">compression_level</span><span class="pi">:</span> <span class="m">3</span>

<span class="na">logging.to_stderr</span><span class="pi">:</span> <span class="no">true</span>


</code></pre></div></div>

<h3 id="gotchas">Gotchas</h3>

<p>Despite the docs claiming that the following works, it won’t with a particularly unhelpful error message <code class="language-plaintext highlighter-rouge">{\"type\":\"document_parsing_exception\",\"reason\":\"[1:1537] object mapping for [message] tried to parse field [message] as object, but found a concrete value\"}, dropping event!","service.name":"filebeat","ecs.version":"1.6.0"}</code></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="pi">-</span> <span class="na">decode_json_fields</span><span class="pi">:</span>
      <span class="na">fields</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">message</span><span class="pi">]</span>
      <span class="na">process_array</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">max_depth</span><span class="pi">:</span> <span class="m">2</span>
      <span class="na">overwrite_keys</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">add_error_key</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">target</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span> <span class="c1"># will place the json in the root object</span>
</code></pre></div></div>

<p>My best guess is that it needs to do this in two operations rather than one, hence the snippet above.</p>]]></content><author><name></name></author><category term="JSON" /><category term="logging" /><category term="ElasticSearch" /><summary type="html"><![CDATA[Pass through JSON logs with vector or filebeat]]></summary></entry></feed>